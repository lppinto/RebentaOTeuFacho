local nextCum = "Left"
local numHits = 0
local finish_hits = 1
local cut_hits = 1
local numFails = 0
local wasHit = false
local slash = false
local continuous_hits = 0
local game_timer = nil
local computed_points = false
local num_combos = 0
local game_won = false
local start = false
local dificulty = "easy"
local clicks_to_finish = 5
local fuel_hits = 0

-- Damage levels / game states
local LEVEL0 = 1
local LEVEL1 = 2
local LEVEL2 = 3
local LEVEL3 = 4
local LEVEL4 = 5
local LEVEL5 = 6
local LEVEL6 = 7
local LEVEL7 = 8
local LEVEL8 = 9
local PREPARE_FINISH = 10
local WAIT_PREPARE_FINISH = 11
local FINISHING_LEVEL = 12
local FINISH_HIM = 13
local FINAL_RESULT = 14
local GAME_END = 15
local curr_level = LEVEL0

local FIRE_LEVEL0 = 0
local FIRE_LEVEL1 = 1
local FIRE_LEVEL2 = 2
local FIRE_LEVEL3 = 3
local FIRE_LEVEL4 = 4
local curr_fire_level = -1

-- Initial object positions
local shield_init_pos = nil
local geleia_inner_init_pos = nil
local toradireita_init_pos = nil
local toraesquerda_init_pos = nil
local lighterRight_init_pos = nil
local lighterLeft_init_pos = nil

-- Time passed for the game
local total_left = 30
local function time_passed(self, handle, elapsed)
	total_left = total_left - elapsed
	if total_left < 6 then
		sound.play("FinishHim#ticktok", {delay = 0, gain = 2, pan = 0, speed = 1})
	end

	if total_left < 0 then total_left = 0 end
	label.set_text("Cenario#Elapsed", string.format("%d", total_left))
	if total_left == 0 then
		timer.cancel(handle)
		curr_level = FINAL_RESULT
		game_won = false
	end
end

local function combo_off(self, handle, elapsed)
	continuous_hits = 0
end

function start_game()
	go.animate("Geleia", "position.x", go.PLAYBACK_LOOP_PINGPONG, 485, go.EASING_INOUTSINE, 0.2,0)

	if dificulty == "hard" then		
		go.animate("Shield", "position.y", go.PLAYBACK_LOOP_PINGPONG, 125, go.EASING_INOUTSINE, 1.5,0)
	end

	game_timer = timer.delay(1,true,time_passed)

	-- combo timer off
	timer.delay(3, true, combo_off)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("dificulty") then
		dificulty = message[1]
	elseif message_id == hash("start") then
		start = true
		start_game()
	end
end

local function animate_object(id, properties, playback, tos, easing, duration)
	for index, property in ipairs(properties) do
		go.animate(id, property, playback, tos[index], easing, duration, 0)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("geleia:/destructable#sprite", "play_animation", {id = hash("geleia1")})
	print (options)
	nextPunch = "Left"
	numHits = 0
	numFails = 0
	wasHit = false
	slash = false
	continuous_hits = 0
	computed_points = false
	num_combos = 0

	-- Save initial positions
	shield_init_pos = go.get_position("geleia:/Shield")
	geleia_inner_init_pos = go.get_position("geleia:/destructable")
	geleia_inner_init_scale = go.get_scale("geleia:/destructable")
	toradireita_init_pos = go.get_position("Tora_direita")
	toraesquerda_init_pos = go.get_position("Tora_esquerda")

	-- Hide initial objects not be seen
	msg.post("laser_left", "disable")
	msg.post("laser_right", "disable")

	-- Hide finishing face states
	msg.post("empty_face", "disable")
	msg.post("salazar_sad", "disable")
	msg.post("skull", "disable")
	msg.post("skull_teeth", "disable")

	label.set_text("Cenario#Elapsed", string.format("%d", total_left))
end

-- function laugh_stop(self, handle, elapsed)
-- 	go.cancel_animations("careca:/boca", "position.y")
-- 	go.set("careca:/boca", "position.y", -92)
-- 	sound.stop("careca:/laughs#mock_sound")
-- end

-- function player_loses()		
-- 	-- Put facho in the middle laughing
-- 	go.cancel_animations("careca", "position.x")
-- 	go.set("careca", "position.x", 500)
-- 	msg.post("careca:/inner#sprite", "play_animation", {id = hash("careca1")})
-- 	msg.post("careca:/inner", "disable")
-- 	msg.post("careca_laughs", "enable")
-- 	msg.post("boca", "enable")
-- 	msg.post("Logo", "play_animation", {id = hash("fraco")})
-- 	sound.play("FinishHim#looser", {delay = 0, gain = 3, pan = 0, speed = 1})
-- 	sound.play("FinishHim#booing", {delay = 1, gain = 2, pan = 0, speed = 1})
-- 
-- 	-- Animate facho mouth laughing
-- 	timer.delay(10, false, laugh_stop)
-- 	go.animate("boca", "position.y", go.PLAYBACK_LOOP_PINGPONG, -148, go.EASING_INOUTSINE, 0.2, 0)
-- 	sound.play("careca:/laughs#mock_sound", {delay = 0, gain = 2, pan = 0, speed = 1})
-- end

function check_game_level(hits)
	if curr_level == FINISHING_LEVEL and numHits >= 110 then
		curr_level = FINISH_HIM
	end

	if curr_level < PREPARE_FINISH then
		if numHits >= 60 then
			curr_level = PREPARE_FINISH
		elseif numHits >= 48 then
			curr_level = LEVEL8
		elseif numHits >= 42 then
			curr_level = LEVEL7
		elseif numHits >= 36 then
			curr_level = LEVEL6
		elseif numHits >= 30 then
			curr_level = LEVEL5
		elseif numHits >= 24 then
			curr_level = LEVEL4
		elseif numHits >= 18 then
			curr_level = LEVEL3
		elseif numHits >= 12 then
			curr_level = LEVEL2
		elseif numHits >= 6 then
			curr_level = LEVEL1
		elseif numHits >= 0 then
			curr_level = LEVEL0
		end
	end
end

function check_fuel_level(fuel_hits)
	if fuel_hits >= 40 then
		curr_fire_level = FIRE_LEVEL4
	elseif fuel_hits >= 30 then
		curr_fire_level = FIRE_LEVEL3
	elseif fuel_hits >= 20 then
		curr_fire_level = FIRE_LEVEL2
	elseif fuel_hits >= 10 then
		curr_fire_level = FIRE_LEVEL1
	elseif fuel_hits >= 5 then
		curr_fire_level = FIRE_LEVEL0
	end
end

-- Prepare finish seccion

local function screem_skull (self, handle, elapsed)
	-- Make skull screem and jaw drop
	sound.play("skull#screem", {delay = 0, gain = 3, pan = 0, speed = 1.1})
	go.animate("skull_teeth", "position.y", go.PLAYBACK_ONCE_FORWARD, -118, go.EASING_LINEAR, 1)
end

local function finish_him ()
	timer.delay(3, false, screem_skull)
	
	-- Compute file points
	if computed_points == false then
		computed_points = true
		bonus_time = 60 + (total_left * 0.2)
		num_combos = num_combos * .3
		numHits = numHits + bonus_time + num_combos
		numHits = numHits - (numFails * 0.1)
		label.set_text("Cenario#Pontos", string.format("%d", numHits))
	end

	curr_level = FINAL_RESULT
	game_won = true
end

local function stop_angel_pee()
	particlefx.stop("mijo#pee")
	particlefx.stop("peesplash#peesplash")
end

local put_out_level = FIRE_LEVEL4
local function put_out_fire(self, handle, elapsed)
	local prev_level = put_out_level - 1
	local curr_fire = string.format("fire#fire%d", put_out_level)
	local next_fire = string.format("fire#fire%d", prev_level)

	particlefx.play(next_fire)
	particlefx.stop(curr_fire)

	put_out_level = put_out_level - 1
	if put_out_level < FIRE_LEVEL0 then
		fire_sound_on = false
		timer.cancel(handle)
		stop_angel_pee()
		curr_level = FINISH_HIM
	end
end

local function stop_lasers()
	msg.post("laser_left", "disable")
	sound.stop("MecaPenisLeft#laser_hum")

	msg.post("laser_right", "disable")
	sound.stop("MecaPenisRight#laser_hum")
end

local function make_angel_pee(self, url, property)
	particlefx.play("mijo#pee")
	particlefx.play("peesplash#peesplash")
	go.animate("sacarneiro", "position.y", go.PLAYBACK_LOOP_PINGPONG, 520, go.EASING_LINEAR, 1, 0)
	go.animate("sacarneiro", "position.x", go.PLAYBACK_LOOP_PINGPONG, 480, go.EASING_LINEAR, 2, 0)

	stop_lasers ()
	
	timer.delay(2, true, put_out_fire)
end

local function call_angle_from_sky(self, handle, elapsed)
	-- first transform face into skull
	msg.post("salazar_sad", "disable")
	msg.post("skull", "enable")
	msg.post("skull_teeth", "enable")

	sound.play("sacarneiro#sound", {delay = 0, gain = 2, pan = 0, speed = 1.0})
	msg.post("bebÃ©#sprite", "play_animation", {id = hash("bebe")})
	go.animate("sacarneiro", "position.y", go.PLAYBACK_ONCE_FORWARD, 530, go.EASING_OUTBACK, 5, 0, make_angel_pee)
end

-- Start Changing Salazar face
local function change_salazar_face()
	-- Change to scared salazar
	msg.post("destructable", "disable")
	msg.post("empty_face", "enable")
	msg.post("salazar_sad", "enable")
	curr_level = FINISHING_LEVEL
end

-- Turn Divine lasers on and change weapons

local function save_lighters_init_positions (self, url, property)
	lighterRight_init_pos = go.get_position("lighter_right")
	lighterLeft_init_pos = go.get_position("lighter_left")
end

local function lower_toras_raise_oil()
	go.animate("Tora_direita", "position.y", go.PLAYBACK_ONCE_FORWARD, -135, go.EASING_LINEAR, 1,0)
	go.animate("Tora_esquerda", "position.y", go.PLAYBACK_ONCE_FORWARD, -135, go.EASING_LINEAR, 1,0)
	go.animate("lighter_right", "position.y", go.PLAYBACK_ONCE_FORWARD, 50, go.EASING_LINEAR, 1,0)
	go.animate("lighter_left", "position.y", go.PLAYBACK_ONCE_FORWARD, 50, go.EASING_LINEAR, 1,0,save_lighters_init_positions)
end

local turned_laser_right = false
local function turn_right_laser()
	if turned_laser_right then return end
	msg.post("laser_right", "enable")
	msg.post("laser_right", "play_animation", {id = hash("laser_blue")})
	sound.play("MecaPenisRight#mega_shoot", {delay = 0, gain = 1, pan = 2, speed = 1.1})
	sound.play("MecaPenisRight#laser_hum", {delay = 0, gain = 1, pan = 2, speed = 1.1})
	turned_laser_right = true
end

local turned_laser_left = false
local function turn_left_laser ()
	if turned_laser_left then return end
	msg.post("laser_left", "enable")
	msg.post("laser_left", "play_animation", {id = hash("laser_red")})
	sound.play("MecaPenisLeft#mega_shoot", {delay = 0, gain = 1, pan = -2, speed = 1.2})
	sound.play("MecaPenisLeft#laser_hum", {delay = 0, gain = 1, pan = -2, speed = 1.2})
	turned_laser_left = true
end

local turned_on_right = false
local function turn_on_righ_meca()
	if turned_on_right then return end
	msg.post("Penis_right#sprite", "play_animation", {id = hash("mecapenis_on_right")})
	sound.play("MecaPenisRight#meca_turning_on", {delay = 0, gain = 1, pan = 2, speed = 1.1})
	turned_on_right = true
end

local turned_on_left = false
local function turn_on_left_meca ()
	if turned_on_left then return end
	msg.post("Penis_left#sprite", "play_animation", {id = hash("mecapenis_on_left")})
	sound.play("MecaPenisLeft#meca_turning_on", {delay = 0, gain = 1, pan = -2, speed = 1.2})
	turned_on_left = true
end

local curr_meca_iteration = 1;
local function turn_on_mecas(self, handle, elapsed)
	if curr_meca_iteration == 1 then
		turn_on_left_meca()
	elseif curr_meca_iteration == 2 then
		turn_on_righ_meca()
	elseif curr_meca_iteration == 3 then
		turn_left_laser()
	elseif curr_meca_iteration == 4 then
		turn_right_laser()
	elseif curr_meca_iteration == 5 then
		lower_toras_raise_oil()
	elseif curr_meca_iteration == 6 then
		change_salazar_face()
	elseif curr_meca_iteration == 7 then
		timer.cancel(handle)
	end

	curr_meca_iteration = curr_meca_iteration + 1
end

local function animate_meca_penis_right (self, url, property)
	go.animate("MecaPenisRight", "position.x", go.PLAYBACK_ONCE_FORWARD, 885, go.EASING_OUTBACK, 3, 0)
	sound.play("MecaPenisRight#mega_apearing", {delay = 0, gain = 1, pan = 2, speed = 1.1})

	-- Wait 2 seconds to turn them both on
	timer.delay(2, true, turn_on_mecas)
end

local function animate_meca_penis_left()
	go.animate("MecaPenisLeft", "position.x", go.PLAYBACK_ONCE_FORWARD, 86, go.EASING_OUTBACK, 3, 0, animate_meca_penis_right)
	sound.play("MecaPenisLeft#mega_apearing", {delay = 0, gain = 1, pan = -2, speed = 1.2})
end

local finish_ready = 0
function prepare_finish (self, handle, elapsed)
	-- Stop shield
	go.set_position(shield_init_pos, "geleia:/Shield")
	go.cancel_animations("Shield", "position.y")
	
	-- Animate meca penis
	animate_meca_penis_left()
end

local function comunicate_score(game_won, score)
	if game_won then
		msg.post("main:/controler#controler", "add_score", {score})
		msg.post("main:/controler#controler", "add_facho_kill")
	end
end

local fire_sound_on = false
local current_fire_level_on = -1
function turn_fire_on(level)
	if fire_sound_on == false and level >= FIRE_LEVEL0 then
		fire_sound_on = true 
		sound.play("Geleia#fire_sound", {delay = 0, gain = 2, pan = 0, speed = 1})
	end

	if current_fire_level_on == level then
		return
	end
	
	if level >= FIRE_LEVEL2 then
		local prev_level = level - 1
		local curr_fire = string.format("fire#fire%d", prev_level)
		local next_fire = string.format("fire#fire%d", level)

		particlefx.play(next_fire)
		particlefx.stop(curr_fire)
	else
		local next_fire = string.format("fire#fire%d", level)
		particlefx.play(next_fire)
	end

	if level >= FIRE_LEVEL4 then
		-- Wait 10 secs for the angel to "save" him and finish him
		timer.delay(10, false, call_angle_from_sky)
	end
	
	current_fire_level_on = level
end

function update(self, dt)
	-- if start == false then
	-- 	return
	-- end

	check_game_level (numHits)

	if curr_level == LEVEL0 or 
	curr_level == LEVEL1 or 
	curr_level == LEVEL2 or 
	curr_level == LEVEL3 or
	curr_level == LEVEL4 or
	curr_level == LEVEL5 or
	curr_level == LEVEL6 or
	curr_level == LEVEL7 or
	curr_level == LEVEL8 then
		if wasHit then
			wasHit = false
			msg.post("geleia:/destructable#sprite", "play_animation", {id = hash(string.format("geleia%d", curr_level))})
		end
	elseif curr_level == PREPARE_FINISH then
		timer.cancel(game_timer)
		timer.delay(0.5, false, prepare_finish)
		curr_level = WAIT_PREPARE_FINISH
	elseif curr_level == WAIT_PREPARE_FINISH then
		return 
	elseif curr_level == FINISHING_LEVEL then
		-- check fire level and turn it on
		check_fuel_level(fuel_hits)
		turn_fire_on(curr_fire_level)
		return
	elseif curr_level == FINISH_HIM then
		finish_him ()
	elseif curr_level == FINAL_RESULT then 
		if game_won == false then
			player_loses()	
		end
		comunicate_score(game_won, numHits)
		curr_level = GAME_END
	elseif GAME_END then
		return
	end

	if continuous_hits > 5 and curr_level ~= FINISHING_LEVEL and dificulty == "hard" then
		sound.play("FinishHim#combo", {delay = 0, gain = 3, pan = 0, speed = 1})
		num_combos = num_combos + 1
		total_left = total_left + 2
		continuous_hits = 0
	end
end

local function check_hit(escudo_pos, side)
	local hit_sound = nil
	local particle_fx = nil
	local miss_sound = nil
	local sound_speed = nil
	local sound_pan = nil
	local sound_gain = 1

	if side == "esquerdo" then		
		-- miss_sound = "socoesquerdo#miss_sound"
		sound_speed = 1.0
		sound_pan = 1
	elseif side == "direito" then
		-- miss_sound = "socodireito#miss_sound"
		sound_speed = 1.10
		sound_pan = -1
	end

	if escudo_pos.y < -100 then
		-- sound.play(hit_sound, {delay = 0, gain = 1, pan = sound_pan, speed = sound_speed})
		particlefx.play("SkinTear")

		-- shake geleia
		go.set_scale(geleia_inner_init_scale, "geleia:/destructable")
		animate_object("geleia:/destructable", {"scale.x", "scale.y"}, go.PLAYBACK_ONCE_PINGPONG, {0.98,0.98}, go.EASING_OUTBACK, 0.2)
		numHits = numHits + 1
		continuous_hits = continuous_hits + 1
		wasHit = true
	else
		sound.play(miss_sound, {delay = 0, gain = 1, pan = 0, speed = 1.00})
		numHits = numHits - 1
		if numHits < 0 then
			numHits = 0
		end
		numFails = numFails + 1
		continuous_hits = 0
		wasHit = false
	end
end

local function shoot_left(escudo_pos)
	if curr_level == FINISHING_LEVEL then
		-- animate fuel lighter
		go.set_position(lighterLeft_init_pos, "lighter_left")
		local movex = lighterLeft_init_pos.x - 50
		local movey = lighterLeft_init_pos.y - 20
		animate_object("lighter_left", {"position.x", "position.y"}, go.PLAYBACK_ONCE_PINGPONG, {movex, movey}, go.EASING_OUTBACK, 0.2)
		particlefx.play("fuel_left")
		sound.play("lighter_left#sound", {delay = 0, gain = 1, pan = 2.0, speed = 1.25})
		fuel_hits = fuel_hits + 1
		wasHit = true
	else
		-- animate cum left
		go.set_position(toraesquerda_init_pos, "Tora_esquerda")
		local movex = toraesquerda_init_pos.x - 50
		local movey = toraesquerda_init_pos.y - 20
		animate_object("Tora_esquerda", {"position.x", "position.y"}, go.PLAYBACK_ONCE_PINGPONG, {movex, movey}, go.EASING_OUTBACK, 0.2)
		particlefx.play("Cum_left")
		sound.play("Tora_esquerda#sound", {delay = 0, gain = 0.5, pan = -1.0, speed = 1.25})
		check_hit(escudo_pos, "esquerda")
	end


	label.set_text("Cenario#Pontos", string.format("%d", numHits))
end

local function shoot_right(escudo_pos)
	if curr_level == FINISHING_LEVEL then
		-- animate fuel lighter
		go.set_position(lighterRight_init_pos, "lighter_right")
		local movex = lighterRight_init_pos.x + 50
		local movey = lighterRight_init_pos.y - 20
		animate_object("lighter_right", {"position.x", "position.y"}, go.PLAYBACK_ONCE_PINGPONG, {movex, movey}, go.EASING_OUTBACK, 0.2)
		particlefx.play("fuel_right")
		sound.play("lighter_right#sound", {delay = 0, gain = 1, pan = 2.0, speed = 1.10})
		fuel_hits = fuel_hits + 1
		wasHit = true
	else
		-- animate cum right
		go.set_position(toradireita_init_pos, "Tora_direita")
		local movex = toradireita_init_pos.x + 50
		local movey = toradireita_init_pos.y - 20
		animate_object("Tora_direita", {"position.x", "position.y"}, go.PLAYBACK_ONCE_PINGPONG, {movex, movey}, go.EASING_OUTBACK, 0.2)
		particlefx.play("Cum_right")
		sound.play("Tora_direita#sound", {delay = 0, gain = 0.5, pan = -1.0, speed = 1.25})
		check_hit(escudo_pos, "direita")
	end

	label.set_text("Cenario#Pontos", string.format("%d", numHits))
end

function on_input(self, action_id, action)
	if start == false then
		return
	end

	if curr_level == PREPARE_FINISH or 
	curr_level == WAIT_PREPARE_FINISH or 
	curr_level == FINISH_HIM or 
	curr_level == FINAL_RESULT then
		return
	elseif curr_level == GAME_END then
		if action_id == hash("click") and action.pressed then
			clicks_to_finish = clicks_to_finish - 1
			if clicks_to_finish == 0 then
				msg.post("main:/controler#controler", "show_menu")
			end
		end
		return 
	else
		local shield_pos = go.get_position("Shield")
		if action_id == hash("click") and action.pressed then
			if nextCum == "Left" then
				shoot_left(shield_pos)			
				nextCum = "Right"
			elseif nextCum == "Right" then
				shoot_right(shield_pos)
				nextCum = "Left"
			end

			if curr_level == FINISHING_LEVEL then
				finish_hits = finish_hits + 0.2
				if finish_hits > 4 then
					finish_hits = 4
				end
			end
		end
	end
end