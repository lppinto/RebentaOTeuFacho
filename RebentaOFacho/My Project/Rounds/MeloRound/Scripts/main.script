local nextCut = nil
local game_won = false
local start = false
local hit_value = 2 -- default shall be 2
local cartaz_hit_value = 1
local cartaz_was_hit = false
local stamina_lose_value = 2.5
local stamina_recover_value = 10

-- Dificulty
local dificulty = "hard"

-- Max time per facho
local facho1_time = 30
local facho2_time = 30

-- To check for bonus
local continuous_attack_count = 0
local continuous_hit_count = 0
local bonus_level = 0

-- Health and Stamina
local maxFachoHealth = 100
local currFachoHealth = maxFachoHealth
local maxPlayerStamina = 100
local currPlayerStamina = maxPlayerStamina
local maxCartazHealth = 50
local currCartazHealth = maxCartazHealth
local cartaz_was_thrown = false

-- Score
local score_per_hit = 100
local curr_score = 0

-- Shortcuts to components
local status_bar_id = "melo:/Score/GameStatus#ScoreAndStats"

-- Round levels
local ROUND1 = 1
local ROUND2 = 2
local curr_round = ROUND1

-- Event levels
local EVENT_OCTOPUS = 1
local EVENT_TORA = 2
local EVENT_DECAPITATE = 3
local curr_event = nil

-- Damage levels / game states
local PREPARE_ROUND = 0
local WAIT_PREPARE_ROUND = 1
local LEVEL0 = 2
local LEVEL1 = 3
local LEVEL2 = 4
local LEVEL3 = 5
local LEVEL4 = 6
local LEVEL5 = 7
local LEVEL6 = 8
local LEVEL7 = 9
local FINISHING_LEVEL = 10
local FINAL_RESULT = 11
local WAIT_GAME_END = 12
local GAME_END = 13
local PREPARE_EVENT = 14
local WAIT_PREPARE_EVENT = 15
local INTERACTIVE_EVENT = 16
local curr_level = PREPARE_ROUND
local number_of_levels = 8

-- To compute cartaz state for ROUND2
local CARTAZ_STATES = 7
local max_cartaz_hits_to_take = maxCartazHealth / cartaz_hit_value
local cartaz_hits_per_state = max_cartaz_hits_to_take / CARTAZ_STATES

-- To compute game levels
local max_hits_to_take = maxFachoHealth / hit_value
local hits_per_level = max_hits_to_take / number_of_levels

-- Initial object positions
local melo_inner_init_pos = nil
local melo_inner_init_scale = nil
local chicohead_init_scale = nil
local init_mouth_pos_y = nil

-- Level hit limits
local LEVEL0_LIMIT
local LEVEL1_LIMIT
local LEVEL2_LIMIT
local LEVEL3_LIMIT
local LEVEL4_LIMIT
local LEVEL5_LIMIT
local LEVEL6_LIMIT
local LEVEL7_LIMIT

-- Cartaz hit limits
local CARTAZ1_LIMIT
local CARTAZ2_LIMIT
local CARTAZ3_LIMIT
local CARTAZ4_LIMIT
local CARTAZ5_LIMIT
local CARTAZ6_LIMIT
local CARTAZ7_LIMIT

------------------- LEGENDAS -------------------

function clear_legendas(next_callback)
	label.set_text("Legendas#legendas", "")
	if next_callback ~= nil then
		timer.delay(0, false, next_callback)
	end
end

local playing_subtitles = false
local subtitles_timer = nil
local next_sub_index = 1
local next_sub_callback = nil
local subtitle_list = nil
function play_legendas(lista_legendas, next_callback)
	playing_subtitles = true
	subtitle_list = lista_legendas
	local dialog = lista_legendas[next_sub_index]
	if dialog == nil then
		clear_legendas(next_callback)
		playing_subtitles = false
		next_sub_index = 1
		subtitle_list = nil
		subtitles_timer = nil
		next_sub_callback = nil
	else
		label.set_text("Legendas#legendas", dialog)
		next_sub_index = next_sub_index + 1
		next_sub_callback = next_callback
		subtitles_timer = timer.delay(5, false, function()
			play_legendas(lista_legendas, next_callback) 
		end)
	end
end

function skip_legenda()
	if playing_subtitles then
		if subtitles_timer ~= nil and 
		timer.cancel(subtitles_timer) and 
		subtitle_list ~= nil then
			play_legendas(subtitle_list, next_sub_callback)
		end
	end
end

function play_legenda(texto)
	subtitles_timer = nil
	next_sub_index = 1
	next_sub_callback = nil
	subtitle_list = nil
	play_legendas({texto}, nil)
end

-------------------------------------------------------------
--------------------- DIALOG MANAGEMENT ---------------------
-------------------------------------------------------------

-- All dialog themes
local DIALOG_DR_A_EST_ENTER_ROUND2 = 0
local DIALOG_TORA_SOLUTION = 1
local DIALOG_TORA_IS_DANGLING = 2
local DIALOG_TORA_NOT_YET_RIGHT = 3
local DIALOG_TORA_NOW_IS_WORKING = 4
local DIALOG_TOUPET_DO_UNAS = 5
function play_dialog(dialog_theme, next_callback)
	-- TODO: Insert dialog_theme
	if dialog_theme == DIALOG_DR_A_EST_ENTER_ROUND2 then
		local legendas = {
			"Estagiário: Dr, o Dr. Melo está em grandes apuros temos que o ajudar!",
			"Dr: É uma vergonha, o meu ex-adorado mentor a ser atacado por polvos esquerdalhos nojentos",
			"Dr: Ainda para mais a atacarem o seu bem mais precioso, o seu cabelo, cobardes",
			"Estagiário: O que fazemos Dr?",
			"Dr: Olhe, procure aí no sotão algo que nos seja util",
			"...",
			"Estagiário: Dr. só encontrei um cartaz velho de campanha do Dr Manuel Monteiro,",
			"Estagiário: Também encontrei o próprio Dr. Manuel Monteiro em posição fetal a chorar, parece já há algum tempo!",
			"...",
			"Dr: Passe para cá o cartaz, pelo menos esse deve aguentar mais pancada do que o segundo"
		}
		play_legendas(legendas, next_callback)
	elseif dialog_theme == DIALOG_TORA_SOLUTION then
		local legendas = {
			"[Dr. abre o feixo das calças em frente ao estagiário.",
			"Esse mostra-se profundamente chocado com que está a testemunhar]",
			"...",
			"Estagiario: Dr... estou sem palavras...",
			"Dr: Não se faça admirado, logo o menino que não apaga o historico do browser!",
			"Dr: Eu sei o que andava a ver nas horas de expediente, tenha vergonha!",
			"Estagiário: Dr., mas mesmo assim, é descomunal, nunca vi nada disso lá...",
			"Estagiário: Imagine, eu próprio ando com um peso pendurado dentro das calças há mais de 2 anos,", 
			"Estagiário: E nem 2 milimetros cresceu, tem alguma dica...",
			"Dr: Esteja mas é calado, temos que ajudar o Dr. Melo o mais urgentemente possivel!",
			"Dr: Isto é a unica solução viável que eu consigo encontrar...",
			"...",
			"Dr: Aquele buraco tem que ser selado imediatamente ou a essência do Dr. Melo esvai-se no vácuo eterno",
			"...",
			"Estagiário: Todos aqueles sonhinhos e as suas grandes ideias a desaparecer no vácuo",
			"Estagiário: Tão triste e um enorme desperdicio...",
			"...",
			"Dr: Isto é a unica coisa com diametro necessário para selar a fenda",
			"Dr: Vai ser um sacrificio enorme da minha parte, mas de certa forma é uma prova da minha gratidão",
			"Dr: Por tudo o que fez por mim no passado. Não seria o homem que sou hoje se não fosse ele",
			"Estagiário: Eu faria o mesmo por si Dr, se conseguisse, por isso estou consigo Dr."
		}
		play_legendas(legendas, next_callback)
	elseif dialog_theme == DIALOG_TORA_IS_DANGLING then
		local legendas = {
			"Dr: A Força magnética do Dr. Meloncolico é gigantesca, não a consigo manter estável e firme",
			"Dr: Oh estágiário abra-me aí o instagram da Susana Garcia..",
			"...",
			"Estagiário: Tem certeza Dr.?",
			"Dr: Faça o que lhe digo!"
		}
		play_legendas(legendas, next_callback)
	elseif dialog_theme == DIALOG_TORA_NOT_YET_RIGHT then
		local legendas = {
			"Dr: Continua a ser muito dificil, temos polos obviamente idênticos, é por isso que se afastam",
			"Dr: É como num iman, polo negativo afasta polo negativo, etc.",
			"Dr: Estagiário, vamos tentar outra coisa",
			"Dr: Abra-me aí o instagram da Mariana Mortágua, nova estratégia, vou-me concentrar a muito custo nela!",
			"...",
			"Estagiário: Não prefere o da Margarida Martins?",
			"Dr: Cale-se e faça o que lhe digo, eu não lhe pago para me contraiar",
			"...",
		}
		play_legendas(legendas, next_callback)
	elseif dialog_theme == DIALOG_TORA_NOW_IS_WORKING then
		local legendas = {
			"Dr: EU NAO LHE DISSE!! Polos opostos atraiem-se...",
			"Estagiário: Deixe-me ajudar também Dr., a minha mão é pequena mas é firme",
			"Dr: Mas que raio é que está a fazer???",
			"Estagiário: Não se preocupe Dr, é tudo pelo bem do Dr. Melo, e eu olho para o outro lado",
			"...",
			"Dr: Bem, só porque é por um bem maior, e ninguém está a ver de qualquer maneira, por isso pode deixar estar",
			"Estagiário: Obrigado Dr., é um honra poder ajudá-lo desta forma!",
			"Dr: Entra que nem uma luva!",
		}
		play_legendas(legendas, next_callback)
	elseif dialog_theme == DIALOG_TOUPET_DO_UNAS then
		local legendas = {
			"[Inaudivel]",
			"Estagiário: Ainda assim Dr., acho mal deixarmos a carcaça do Dr. Melo assim tão desprotegida",
			"Dr: Sim, e tem alguma ideia maravilhosa para resolver o assunto?",
			"Estagiário: No outro dia estive num leilão de perucas e deparei-me com algo estranho",
			"Dr: Ai sim? Um leilão de perucas?",
			"Estagiário: Sim, ao que parece depois da ultima entrevista do Dr. Unas com o Dr. Tomás Taveira, este disse-lhe algo que o desconcertou bastante",
			"Dr: O quê? Despache-se homem! O pessoal quer acabar com esta seca de jogo",
			"Estagiário: Disse-lhe que reconhecia muito bem aquele tipo de cabelo que lhe tinham implantado, e tinha a certeza que não tinha vindo da nuca",
			"Dr: Como assim??",
			"Estagiário: Bem, isso fez ainda aumentar mais as suspeitas do Dr. Unas e este num ato de loucura pegou numa faca do mato e escalpou-se a si mesmo",
			"Estagiário: No dia seguinte colocou o escalpe em leilão, leilão esse que tive a sorte de ganhar, por 2€",
			"Dr: E agora o que pensa fazer com essa coisa?",
			"Estagiário: Olha, talvez tapar o Dr. Melo com ele, ou melhor, a sua carcaça inerte, para lhe dar alguma diginidade depois disto tudo",
			"Dr: Oh homem, faça o que quiser com as suas 20 horas de trabalho, eu cá não importo!",
			"...",
		}
		play_legendas(legendas, next_callback)
	end
end

function compute_limits()
	LEVEL0_LIMIT = maxFachoHealth - (hits_per_level * hit_value * (LEVEL0 - 2))
	LEVEL1_LIMIT = maxFachoHealth - (hits_per_level * hit_value * (LEVEL1 - 2))
	LEVEL2_LIMIT = maxFachoHealth - (hits_per_level * hit_value * (LEVEL2 - 2))
	LEVEL3_LIMIT = maxFachoHealth - (hits_per_level * hit_value * (LEVEL3 - 2))
	LEVEL4_LIMIT = maxFachoHealth - (hits_per_level * hit_value * (LEVEL4 - 2))
	LEVEL5_LIMIT = maxFachoHealth - (hits_per_level * hit_value * (LEVEL5 - 2))
	LEVEL6_LIMIT = maxFachoHealth - (hits_per_level * hit_value * (LEVEL6 - 2))
	LEVEL7_LIMIT = maxFachoHealth - (hits_per_level * hit_value * (LEVEL7 - 2))

	CARTAZ1_LIMIT = maxCartazHealth - (cartaz_hits_per_state * cartaz_hit_value * 1)
	CARTAZ2_LIMIT = maxCartazHealth - (cartaz_hits_per_state * cartaz_hit_value * 2)
	CARTAZ3_LIMIT = maxCartazHealth - (cartaz_hits_per_state * cartaz_hit_value * 3)
	CARTAZ4_LIMIT = maxCartazHealth - (cartaz_hits_per_state * cartaz_hit_value * 4)
	CARTAZ5_LIMIT = maxCartazHealth - (cartaz_hits_per_state * cartaz_hit_value * 5)
	CARTAZ6_LIMIT = maxCartazHealth - (cartaz_hits_per_state * cartaz_hit_value * 6)
	CARTAZ7_LIMIT = maxCartazHealth - (cartaz_hits_per_state * cartaz_hit_value * 7)
end

local razer_left = nil
local razer_right = nil
function attach_attacks()
	-- Add razers as parent bones to colision objects
	razer_left = spine.get_go("polvo_esquerdo#spinemodel", "razer1")
	msg.post("left_attack#attack", "set_parent", { parent_id = razer_left })
	razer_right = spine.get_go("polvo_direito#spinemodel", "razer1")
	msg.post("right_attack#attack", "set_parent", { parent_id = razer_right })
end

function init(self)
	msg.post(".", "acquire_input_focus")
	
	nextCut = "Left"
	numHits = 0

	-- Save initial positions
	melo_inner_init_pos = go.get_position("Melo")
	melo_inner_init_scale = go.get_scale("Melo")
	chicohead_init_scale = go.get_scale("ChicoHead")
	init_mouth_pos_y = go.get("Mouth", "position.y")

	-- hide some stuff
	msg.post("Friendship#sprite", "disable")
	
	-- Compute level limits
	compute_limits()

	-- Attach attacks to hitboxes
	attach_attacks()
	
	-- Tell all the targets this script will register the hits
	msg.post("ChicoHead", "hit_register")
	msg.post("Cabeça", "hit_register")
	msg.post("Cartaz", "hit_register")
	
	-- TODO
	start = true
end

------------------------ CHICO AREA ------------------------

function set_chico_ferida(number, state)
	local ferida_id = string.format("Feridas#ferida%d", number)
	msg.post(ferida_id, state)
end

local last_ferida_level_set = nil
function change_chico_ferida()
	if curr_level > LEVEL1 and curr_level <= LEVEL7 and last_ferida_level_set ~= curr_level then
		last_ferida_level_set = curr_level
		local ferida_number = curr_level - LEVEL1
		set_chico_ferida (ferida_number, "enable")
	end
end

function animate_chico_hit()
	go.set_scale(chicohead_init_scale, "ChicoHead")
	msg.post("ChicoHead#sprite", "play_animation", {id = hash("hit")})
	go.animate("ChicoHead", "scale.x", go.PLAYBACK_ONCE_BACKWARD, 0.27, go.EASING_OUTELASTIC, 0.2)
	go.animate("ChicoHead", "scale.y", go.PLAYBACK_ONCE_BACKWARD, 0.27, go.EASING_OUTELASTIC, 0.2)
end

function update_chico_state()
	-- Delete all the stuff not needed for chico right now
	if curr_level < LEVEL0 then
		-- Set normal first face
		msg.post("ChicoHead#sprite", "play_animation", {id = hash("chico_preocupado")})
		-- No wounds visible
		for i = 1,6 do
			set_chico_ferida(i, "disable")
		end
		-- No blood mask visible
		msg.post("BloodMask#sprite", "disable")
	elseif curr_level <= LEVEL7 then
		change_chico_ferida()
	end

	if currFachoHealth <= 0 then
		-- Let's prepare for the finishing even and for what comes next
		curr_level = PREPARE_EVENT
		curr_event = EVENT_DECAPITATE
	end
end

------------------------ MELO AREA ------------------------

function set_hole (state)
	msg.post("Hole_Back#sprite", state)
	msg.post("Hole_Top#sprite", state)
	msg.post("Top_To_Hide_Drill#sprite", state) 
end


---- Set Top of the head to hide the drill ----

local TOP_BALD = "top_to_hide_drill"
local TOP_NO_HAIR_OLD1 = "top6_to_hide_drill"
local TOP_NO_HAIR_OLD1_SAD = "top6_sad_to_hide_drill"
local TOP_NO_HAIR_OLD2 = "top7_to_hide_drill"
local TOP_NO_HAIR_OLD3 = "top8_to_hide_drill"
local TOP_NO_HAIR_OLD3_SAD = "top8_sad_to_hide_drill"
function set_top_to_hide(type)
	msg.post("Top_To_Hide_Drill#sprite", "play_animation", {id = hash(type)})
end

function set_beam (state)
	msg.post("Beam#sprite", state)
	if state == "enable" then
		sound.play("Beam#sound")
	else
		sound.stop("Beam#sound")
	end
end 

function set_raios (state)
	msg.post("Raios#sprite", state)
	if state == "enable" then
		sound.play("Raios#electricity")
	else
		sound.stop("Raios#electricity")
	end
end

function set_mouth (state)
	msg.post("Mouth#sprite", state)
end

function set_god_eyes(state)
	msg.post("god_eyes#sprite", state)
end

-----------------------
---- Move the eyes ----
-----------------------

local OLHOS_DIR = 0
local OLHOS_ESQ = 1
local OLHOS_CIMA = 2
local OLHOS_BAIXO = 3
local OLHOS_TROCADOS = 4
local OLHOS_TREMEM = 5
local OLHOS_CENTRO = 6
function mexe_olhos_melo (dir, duration, callback)
	if dir == OLHOS_DIR then
		go.animate("olhos", "position.x", go.PLAYBACK_ONCE_FORWARD, 16, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_ESQ then
		go.animate("olhos", "position.x", go.PLAYBACK_ONCE_FORWARD, -17, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_CIMA then
		go.animate("olhos", "position.y", go.PLAYBACK_ONCE_FORWARD, 26, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_BAIXO then
		go.animate("olhos", "position.y", go.PLAYBACK_ONCE_FORWARD, -14, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_TROCADOS then
		go.animate("olho_direito", "position.x", go.PLAYBACK_ONCE_FORWARD, -20, go.EASING_LINEAR, duration)
		go.animate("olho_esquerdo", "position.x", go.PLAYBACK_ONCE_FORWARD, 20, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_TREMEM then
		go.animate("olhos", "position.y", go.PLAYBACK_LOOP_PINGPONG, 15, go.EASING_OUTBOUNCE, 0.1)
	elseif dir == OLHOS_CENTRO then
		go.animate("olho_direito", "position.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, duration)
		go.animate("olho_esquerdo", "position.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, duration)
		go.animate("olhos", "position.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, duration)
		go.animate("olhos", "position.y", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, duration, 0, callback)
	end
end

function stop_melo_eyes ()
	go.cancel_animations("olho_direito", "position.x")
	go.cancel_animations("olho_esquerdo", "position.x")
	go.cancel_animations("olhos", "position.x")
	go.cancel_animations("olhos", "position.y")

	mexe_olhos_melo(OLHOS_CENTRO, 1, function() end)
end

local MELO_HAPPY_FACE = "Cabeça1"
local MELO_HAPPY_FACE_NO_MOUTH = "Cabeça1_sem_boca"
local MELO_NORMAL_FACE = "Cabeça2"
local MELO_NORMAL_FACE_MAD = "Cabeça2_mad"
local NELO_NORMAL_FACE_AFRAID = "Cabeça2_afraid"
local MELO_LESS_HAIR_FACE = "Cabeça3"
local MELO_LESS_HAIR_FACE_AFRAID = "Cabeça3_afraid"
local MELO_EVEN_LESS_HAIR_FACE = "Cabeça4"
local MELO_EVEN_LESS_HAIR_FACE_AFRAID = "Cabeça4_afraid"
local MELO_NO_HAIR_FACE = "Cabeça5"
local MELO_NO_HAIR_NO_MOUTH = "Cabeça5_afraid_no_mouth"
local MELO_NO_HAIR_OLD1 = "Cabeça6"
local MELO_NO_HAIR_OLD2 = "Cabeça7"
local MELO_NO_HAIR_OLD3 = "Cabeça8"

local MELO_MOUTH1 = "Mounth1"
function change_melo_face(type, mouth)
	msg.post("Cara#sprite", "play_animation", {id = hash(type)})
	
	if mouth ~= nil then
		msg.post("Mouth#sprite", "enable")
		msg.post("Mouth#sprite", "play_animation", {id = hash(mouth)})
	else
		msg.post("Mouth#sprite", "disable")
	end
end

_G["MELO_FACE_LEVEL0"] = "Cabeça2"
_G["MELO_FACE_LEVEL1"] = "Cabeça2_afraid"
_G["MELO_FACE_LEVEL2"] = "Cabeça3"
_G["MELO_FACE_LEVEL3"] = "Cabeça3_afraid"
_G["MELO_FACE_LEVEL4"] = "Cabeça4"
_G["MELO_FACE_LEVEL5"] = "Cabeça4_afraid"
_G["MELO_FACE_LEVEL6"] = "Cabeça5"
_G["MELO_FACE_LEVEL7"] = "Cabeça5_afraid"
function change_melo_face_per_level(level_number)
	local var_name = "MELO_FACE_LEVEL" .. level_number;
	local face_id = _G[var_name];
	msg.post("Cara#sprite", "play_animation", {id = hash(face_id)})
end

local MELO_NORMAL_SUIT = "FatoDoMelo"
local MELO_SQUID_SUIT = "FatoWithSquids"
function change_melo_suit(type)
	msg.post("Fato#sprite", "play_animation", {id = hash(type)})
end

function throw_cartaz_away(self, handle, elapsed)
	-- Dr says something about Manuel Monteiro
	go.cancel_animations("Cartaz", "euler.z")
	local curr_rotation = get_object_rotation("Cartaz")
	local rotation = curr_rotation + 180
	go.animate("Cartaz", "euler.z", go.PLAYBACK_ONCE_FORWARD, rotation, go.EASING_LINEAR, 1.5, 0)
	go.animate("Cartaz", "position.x", go.PLAYBACK_ONCE_FORWARD, 700, go.EASING_LINEAR, 1.5, 0, function()
		-- Put cartaz back where it was in case we want to reuse it again
		go.set("Cartaz", "euler.z", 180)
		go.set("Cartaz", "position.x", 0)
		go.set("Cartaz", "position.y", 725)
	end)
end

local avoid_rotation = 10
local avoid_move_x = 250
function animate_melo_avoiding_attacks()
	avoid_rotation = -avoid_rotation
	avoid_move_x = -avoid_move_x
	curr_x_pos = go.get("Melo", "position.x")
	go.animate("Melo", "position.x", go.PLAYBACK_ONCE_PINGPONG, curr_x_pos - avoid_move_x, go.EASING_LINEAR, 1)
	go.animate("Melo", "position.y", go.PLAYBACK_ONCE_PINGPONG, 0, go.EASING_LINEAR, 1)
	go.animate("Melo", "euler.z", go.PLAYBACK_ONCE_PINGPONG, avoid_rotation, go.EASING_LINEAR, 1, 0, animate_melo_avoiding_attacks)
end

function move_melo_back_to_main_position(next_callback)
	go.cancel_animations("Melo", "position.x")
	go.cancel_animations("Melo", "position.y")
	go.cancel_animations("Melo", "euler.z")
	go.animate("Melo", "position.x", go.PLAYBACK_ONCE_PINGPONG, 480, go.EASING_LINEAR, 1)
	go.animate("Melo", "position.y", go.PLAYBACK_ONCE_PINGPONG, 67, go.EASING_LINEAR, 1)
	go.animate("Melo", "euler.z", go.PLAYBACK_ONCE_PINGPONG, 0, go.EASING_LINEAR, 1, 0, next_callback)
end

local melo_avoiding_attacks = false
function update_melo_state(next_callback)
	if curr_round == ROUND1 then
		-- hide all the stuff not needed for melo right now
		set_hole("disable")
		set_beam("disable")
		set_raios("disable")
		set_mouth("disable")
		set_god_eyes("disable")
		change_melo_face(MELO_HAPPY_FACE)
		change_melo_suit(MELO_NORMAL_SUIT)
	elseif curr_round == ROUND2 then
		if curr_level < LEVEL0 then
			-- hide all the stuff not needed for melo right now
			set_hole("disable")
			set_beam("disable")
			set_raios("disable")
			set_mouth("disable")
			set_god_eyes("disable")
			change_melo_face(MELO_NORMAL_FACE_MAD)
			change_melo_suit(MELO_SQUID_SUIT)
			go.animate("Melo", "scale.x", go.PLAYBACK_ONCE_FORWARD, melo_inner_init_scale.x, go.EASING_LINEAR, 2)
			go.animate("Melo", "scale.y", go.PLAYBACK_ONCE_FORWARD, melo_inner_init_scale.y, go.EASING_LINEAR, 2)
			go.animate("Melo", "position.y", go.PLAYBACK_ONCE_FORWARD, melo_inner_init_pos.y, go.EASING_LINEAR, 2)
			currFachoHealth = maxFachoHealth
		elseif curr_level <= LEVEL7 then
			change_melo_face_per_level(curr_level - LEVEL0)

			if currCartazHealth <= 0 and melo_avoiding_attacks == false and curr_level < LEVEL7 then
				-- Melo starts slight avoiding the attacks
				melo_avoiding_attacks = true
				animate_melo_avoiding_attacks()
			elseif melo_avoiding_attacks and curr_level == 7 then
				move_melo_back_to_main_position()
			end
		end

		if currFachoHealth <= 0 then
			-- Get rid of cartaz if it's still there
			if currCartazHealth > 0 then
				throw_cartaz_away()
			end

			if melo_avoiding_attacks then
				move_melo_back_to_main_position()
			end
			
			-- Let's prepare for the finishing even and for what comes next
			curr_level = PREPARE_EVENT
			curr_event = EVENT_OCTOPUS
		end
	end
end

function raise_melo_hand_wave(next_callback)
	local curr_hand_pos = go.get_position("wavingHand")
	go.animate("wavingHand", "position.y", go.PLAYBACK_ONCE_FORWARD, -164, go.EASING_LINEAR, 2, 0, function()
		timer.delay(1, false, function ()
			-- Wave
			go.animate("wavingHand", "rotation.z", go.PLAYBACK_LOOP_PINGPONG, -.2, go.EASING_LINEAR, 1)
			timer.delay(2, false, function ()
				print "Stoping waving"
				go.cancel_animations("wavingHand", "rotation.z")
				-- Put hand back
				go.animate("wavingHand", "position.y", go.PLAYBACK_ONCE_FORWARD, curr_hand_pos.y, go.EASING_LINEAR, 1, 0, next_callback)
			end)
		end)
	end)
end

function ready_attackers(next_callback)
	local function idle_tentacles()
		spine.play_anim("polvo_esquerdo#spinemodel", "Idle_left", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
		spine.play_anim("polvo_direito#spinemodel", "Idle_Right", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
	end

	local function raise_tentacles()
		spine.play_anim("polvo_esquerdo#spinemodel", "Rise_Left", go.PLAYBACK_ONCE_FORWARD, {playback_rate = .5})
		spine.play_anim("polvo_direito#spinemodel", "Rise_Right", go.PLAYBACK_ONCE_FORWARD, {playback_rate = .5}, idle_tentacles)
	end

	-- Wait 5 seconds to raise the tentacles
	timer.delay(2, false, raise_tentacles)
	if next_callback ~= nil then
		timer.delay(4, false, next_callback)
	end
end

function rest_attackers (next_callback)
	local function rest_tentacles()
		spine.play_anim("polvo_esquerdo#spinemodel", "Dorment_Left", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
		spine.play_anim("polvo_direito#spinemodel", "Dorment_Right", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
	end

	local function lower_tentacles()
		spine.play_anim("polvo_esquerdo#spinemodel", "Lower_Left", go.PLAYBACK_ONCE_FORWARD, {playback_rate = .5})
		spine.play_anim("polvo_direito#spinemodel", "Lower_Right", go.PLAYBACK_ONCE_FORWARD, {playback_rate = .5}, rest_tentacles)
	end

	-- Wait 2 secs for next callback
	timer.delay(2, false, lower_tentacles)
	if next_callback ~= nil then
		timer.delay(2, false, next_callback)
	end
end

function raise_attackers (next_callback)
	-- Raise squids
	go.animate("polvo_esquerdo", "position.y", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 2)
	go.animate("polvo_direito", "position.y", go.PLAYBACK_ONCE_FORWARD, 2, go.EASING_LINEAR, 2)
	
	ready_attackers(next_callback)
end

function foreshadow_attack(next_callback)
	-- People stop clapping
	sound.stop("Melo#palmas");
	timer.delay(1, false, function()
		change_melo_face(MELO_NORMAL_FACE)
	end)
	
	timer.delay(1, false, function()
		sound.play("Cenario#crowd_afraid")
	end)
	
	timer.delay(1, false, function()
		raise_attackers(next_callback)
	end)
end

function melo_looks_around (speed, next_callback)
	mexe_olhos_melo(OLHOS_DIR, speed, function()
		mexe_olhos_melo(OLHOS_ESQ, speed, function()
			mexe_olhos_melo(OLHOS_CENTRO, speed, next_callback)
		end)
	end)
end

function raise_chico(next_callback)
	go.animate("Melo", "position.y", go.PLAYBACK_ONCE_FORWARD, melo_inner_init_pos.y - 60, go.EASING_LINEAR, 2)
	go.animate("Melo", "scale.x", go.PLAYBACK_ONCE_FORWARD, 0.9, go.EASING_LINEAR, 2)
	go.animate("Melo", "scale.y", go.PLAYBACK_ONCE_FORWARD, 0.9, go.EASING_LINEAR, 2)
	go.animate("Chico", "position.y", go.PLAYBACK_ONCE_FORWARD, -450, go.EASING_LINEAR, 1, 0)
	go.animate("Chico", "position.x", go.PLAYBACK_ONCE_FORWARD, 480, go.EASING_LINEAR, 1, 0)
	go.animate("Chico", "euler.z", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 1, 0, next_callback)
end

function get_object_rotation(id)
	local rotation_z = go.get(id, "euler.z")
	return rotation_z
end

local chico_rot = 20
local chico_first_rot_iter = true
local chico_next_rot = nil
function start_moving_chico()
	if chico_first_rot_iter then
		local curr_rotation = get_object_rotation("Chico")
		local rotation = curr_rotation + chico_rot
		chico_next_rot = curr_rotation - chico_rot
		go.animate("Chico", "euler.z", go.PLAYBACK_ONCE_FORWARD, rotation, go.EASING_LINEAR, 1, 0, start_moving_chico)
		chico_first_rot_iter = false
	else
		go.animate("Chico", "euler.z", go.PLAYBACK_LOOP_PINGPONG, chico_next_rot, go.EASING_LINEAR, 2, 0)
	end
end

local cartaz_rot = 25
local cartaz_first_iter = true
local cartaz_next_rot = nil
function start_moving_cartaz()
	if cartaz_first_iter then
		local curr_rotation = get_object_rotation("Cartaz")
		local rotation = curr_rotation + cartaz_rot
		cartaz_next_rot = curr_rotation - cartaz_rot
		go.animate("Cartaz", "euler.z", go.PLAYBACK_ONCE_FORWARD, rotation, go.EASING_LINEAR, 1.5, 0, start_moving_cartaz)
		cartaz_first_iter = false
	else
		go.animate("Cartaz", "euler.z", go.PLAYBACK_LOOP_PINGPONG, cartaz_next_rot, go.EASING_LINEAR, 2, 0)
	end
end

function recover_stamina(value)
	if currPlayerStamina < 100 then
		currPlayerStamina = currPlayerStamina + value
		if currPlayerStamina > maxPlayerStamina then 
			value = value - currPlayerStamina - maxPlayerStamina 
			currPlayerStamina = 100 -- Don't overflow
		end

		-- Comunicate to the status status_bar_id
		msg.post(status_bar_id, "give_player", {value})
	end
end

function lose_stamina(value)
	-- The player will lose stamina
	currPlayerStamina = currPlayerStamina - value
	local stamina_lose_to_report = value
	if currPlayerStamina < 0 then
		stamina_lose_to_report = currPlayerStamina + value
		currPlayerStamina = 0			
	end

	msg.post(status_bar_id, "hurt_player", {stamina_lose_to_report})
end

-- This is where the party starts
local stamina_timer = nil
function start_round()
	-- Increase player stamina each 5 secods until max is reached
	local function start_stamina_time()
		if stamina_time ~= nill then timer.cancel(stamina_timer) end
		stamina_timer = timer.delay(5, true, function()
			if currPlayerStamina < 100 then
				recover_stamina(stamina_recover_value)
			end
		end)
	end
	
	if curr_round == ROUND1 then	
		curr_level = LEVEL0
		start_stamina_time()
		start_moving_chico()
	elseif curr_round == ROUND2 then
		curr_level = LEVEL0
		start_stamina_time()
		start_moving_cartaz()
	end
end

function move_andaime(y_position, duration, next_callback)
	sound.play("Andaime#andaime_going", {delay = 0, gain = 1, pan = 0, speed = 1})
	go.animate("Andaime", "position.y", go.PLAYBACK_ONCE_FORWARD, y_position, go.EASING_INOUTBACK, duration, 0, function()
		sound.stop("Andaime#andaime_going")
		sound.play("Andaime#andaime_stop", {delay = 0, gain = 1, pan = 0, speed = 1}, next_callback)
	end)
end

----------------------------------------------------------------------------
-------------------------- GAME ROUND PREPARATION --------------------------
----------------------------------------------------------------------------

function prepare_round()
	
	local function round1 (next_callback)
		msg.post(status_bar_id, "prepare", {2})

		update_melo_state()
		update_chico_state()

		-- Disable melo hitboxes
		msg.post("Cabeça#left", "disable")
		msg.post("Cabeça#right", "disable")
	
		-- Disable octopus hitboxes for now until they are needed
		msg.post("left_attack#attack", "disable")
		msg.post("right_attack#attack", "disable")
		
		-- People start clapping
		sound.play("Melo#palmas");
		
		-- One second later melo raises hand and waves
		timer.delay(1, false, function()
			raise_melo_hand_wave(function()
				melo_looks_around(1, function()
					foreshadow_attack(function()
						melo_looks_around(0.5, function()
							raise_chico(function()
								msg.post(status_bar_id, "facho_name", {"Dr. Chiquinho"})
								msg.post(status_bar_id, "set_time", {facho1_time})
								msg.post(status_bar_id, "start", {ROUND1, maxFachoHealth})
							end)
						end)
					end)
				end)
			end)
		end)
	end

	local function round2 (next_callback)
		-- People start screaming in horror
		-- sound.play("Cenario#crowd_afraid")
		
		-- Melo drops chico.
		go.animate("Chico", "position.y", go.PLAYBACK_ONCE_FORWARD, -750, go.EASING_INBACK, 2)

		-- Disable chico hitboxes
		msg.post("ChicoHead#center", "disable")
		msg.post("ChicoHead#left", "disable")
		msg.post("ChicoHead#right", "disable")

		-- Enable Melo hitboxes
		msg.post("Cabeça#left", "enable")
		msg.post("Cabeça#right", "enable")

		-- Disable octopus hitboxes for now until they are needed
		msg.post("left_attack#attack", "disable")
		msg.post("right_attack#attack", "disable")

		-- comes back to same position but now with octopus suit
		update_melo_state()
		
		-- Melo says something nasty about the uselessnes of chico
		play_legenda("Meloncolico: Mais uma liderança do CDS tristemente decapitada")
		
		-- Octopus attacker rests again for awhile while people shout again in horror
		rest_attackers(function()
			-- The Andaime slowly get's down and we hear some one talking from above
			-- also lower status bar to be seen
			msg.post(status_bar_id, "move_status_bar", {510})
			move_andaime(730, 5, function()
				-- Estagiario and Dr. start talking here
				play_dialog(DIALOG_DR_A_EST_ENTER_ROUND2, function()
					mexe_olhos_melo(OLHOS_CIMA, 1, function()
						mexe_olhos_melo(OLHOS_CENTRO, 1, function()
							change_melo_face(MELO_NORMAL_FACE)
							-- Dr. pega no cartaz e coloca-o em frente à cara do Dr Melo
							go.animate("Cartaz", "position.y", go.PLAYBACK_ONCE_FORWARD, 30, go.EASING_LINEAR, 2, 0, function()
								msg.post(status_bar_id, "facho_name", {"Dr. Meloncolico"})
								msg.post(status_bar_id, "add_time", {facho2_time})

								timer.delay(2, false, function()
									-- Polvos acordam novamente 
									raise_attackers(function()
										timer.delay(1, false, function()
											-- Começa o Round2	
											msg.post(status_bar_id, "start", {ROUND2, maxFachoHealth})
										end)
									end)
								end)
							end)
						end)
					end)
				end)
			end)
		end)
	end

	msg.post(status_bar_id, "set_bonus_level", {0, true})
	
	if curr_round == ROUND1 then
		round1()
	elseif curr_round == ROUND2 then
		round2()
	end
end

---------------------------------------------------------------------------
----------------------------- CHICO DECAPITATE ----------------------------
---------------------------------------------------------------------------

function last_squid_chico_attack(reverse, next_callback)
	if reverse == false then
		sound.play("polvo_esquerdo#attack_sound", {delay = 0, gain = 2, pan = -1, speed = 1})
		sound.play("polvo_direito#attack_sound", {delay = 0, gain = 2, pan = -1, speed = 1})
		spine.play_anim("polvo_esquerdo#spinemodel", "Attack_Pause", go.PLAYBACK_ONCE_FORWARD, {playback_rate = 2.5})
		spine.play_anim("polvo_direito#spinemodel", "Atack_Pause", go.PLAYBACK_ONCE_FORWARD, {playback_rate = 2.5}, next_callback)
	else
		spine.play_anim("polvo_esquerdo#spinemodel", "Attack_Pause", go.PLAYBACK_ONCE_BACKWARD, {playback_rate = 2.5})
		spine.play_anim("polvo_direito#spinemodel", "Atack_Pause", go.PLAYBACK_ONCE_BACKWARD, {playback_rate = 2.5}, next_callback)
	end
end

function animate_decapitation (next_callback)
	-- Animate neck blood and crackling noise
	sound.play("ChicoHead#crack")
	particlefx.play("ChicoBody#NeckBlood")
	particlefx.play("ChicoHead#HeadBlood")

	-- Make head go up 
	local currposy = go.get("ChicoHead", "position.y")
	go.animate("ChicoHead", "euler.z", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_LINEAR, 0.5)
	go.animate("ChicoHead", "position.y", go.PLAYBACK_ONCE_FORWARD, currposy + 200, go.EASING_OUTBACK, 3, 0, function()
		-- Make head go down
		currposy = go.get("ChicoHead", "position.y")
		go.animate("ChicoHead", "scale.x", go.PLAYBACK_ONCE_FORWARD, 0.5, go.EASING_LINEAR, 2)
		go.animate("ChicoHead", "scale.y", go.PLAYBACK_ONCE_FORWARD, 0.5, go.EASING_LINEAR, 2)
		go.animate("ChicoHead", "position.y", go.PLAYBACK_ONCE_FORWARD, currposy - 500, go.EASING_INBACK, 3, 0, next_callback)
	end)
end

function animate_chico_dead(next_callback)
	msg.post("ChicoHead#sprite", "play_animation", {id = hash("chico_morto")})
	msg.post("BloodMask#sprite", "enable")

	-- Stop all chico animations
	go.cancel_animations("Chico", "euler.z")
	
	-- Center chico for last strike
	go.animate("Chico", "euler.z", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 2, 0, next_callback)
end

function decapitate_chico()
	curr_level = WAIT_PREPARE_EVENT
	-- Lets do the last attack to rip chico head off

	-- Disable chico hitboxes, not needed anymore
	msg.post("ChicoHead#center", "disable")
	msg.post("ChicoHead#left", "disable")
	msg.post("ChicoHead#right", "disable")

	go.set("ChicoHead", "position.z", 0.1)
	
	animate_chico_dead(function()
		last_squid_chico_attack(false, function()
			timer.delay(2, false, function()
				last_squid_chico_attack(true, function()
					animate_decapitation(function()
						-- Let's prepare for Melo's Round!
						curr_round = ROUND2
						curr_level = PREPARE_ROUND
					end)
				end)
			end)
		end)
	end)
end

---------------------------------------------------------------------------
-------------------------- OCTOPUS PREPARE EVENT --------------------------
---------------------------------------------------------------------------

function move_octopus_in_place(next_callback)
	sound.play("FullDrill#music")
	go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 110, go.EASING_LINEAR, 5, 0, function()
		go.animate("FullDrill", "euler.z", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 5, 0)
		go.animate("FullDrill", "position.x", go.PLAYBACK_ONCE_FORWARD, 61.5, go.EASING_LINEAR, 5, 0, function()
			timer.delay(2, false, next_callback)
		end)
	end)
end

function move_octopus_away(next_callback)
	sound.stop("FullDrill#music")
	go.animate("FullDrill", "euler.z", go.PLAYBACK_ONCE_FORWARD, -20, go.EASING_LINEAR, 5, 0, next_callback)
	go.animate("FullDrill", "position.x", go.PLAYBACK_ONCE_FORWARD, 180, go.EASING_LINEAR, 5, 0, function()
		go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, -310, go.EASING_LINEAR, 5, 0)
	end)
end

function prepare_octopus_event()
	-- Start bringing the octopus inside the ring
	-- Music of the octopus stars playing
	-- Melo looks scared
	-- The octoputs sets in position right above Melo's head
	move_octopus_in_place(function()
		-- Dr and Estagiário start another dialog about the huge octopus
		local legendas = {
			"Estagiário: Dr, olhe-me só para aquele bicharoco, o que é que os polvos esquerda-lhos",
			"terão em mente?",
			"Dr: Eu não sei, mas algo de muito grave se vai passar",
			"Dr: Se eu fosse uma pessoal sensivel a esta hora virava os olhos!",
			"Estagiário: Prevejo que vá acontecer algo terrivel ao nosso querido Dr. Melo",
		}
		play_legendas(legendas, function()
			-- The tip of the octopus opens up revealing a drill and plays slimy sound
			sound.play("DrillTip#sound")
			go.animate("DrillTip", "euler.z", go.PLAYBACK_ONCE_FORWARD, -180, go.EASING_LINEAR, 3)

			-- The drill starts working
			timer.delay(3, false, function()
				sound.set_gain("FullDrill#music", 0.3)
				sound.play("Drill#idle_drill", {delay = 0, gain = .5, pan = 0, speed = 1})
				msg.post("Drill#sprite", "play_animation", {id = hash("Drill")})

				-- This gives control to the player to drill at least 3 times until a big hole is done
				curr_level = INTERACTIVE_EVENT
				play_legenda("<Clique para furar o crânio do Dr>")
			end)
		end)
	end)
end

------------------------------------------------------------------------
-------------------------- TORA PREPARE EVENT --------------------------
------------------------------------------------------------------------

function set_dr_hands(state)
	msg.post("MaoDrDireita#sprite", state)
	msg.post("MaoDrEsquerda#sprite", state)
end

function set_estagiario_hand(state)
	msg.post("Mão_estagiario#sprite", state)
end

local DANGLING_TORA = 1
local PUMPING_TORA = 2
local curr_tora = DANGLING_TORA -- default
function set_tora(type)
	if type == DANGLING_TORA then
		msg.post("Mega#pumping_tora", "disable")
		msg.post("Mega#dangling_tora", "enable")
	elseif type == PUMPING_TORA then
		msg.post("Mega#pumping_tora", "enable")
		msg.post("Mega#dangling_tora", "disable")
	end
end

function move_dr_tora_hand(y_move_offset, next_callback)
	-- Move Dr hand back the negative offset
	local curr_hand_y_pos = go.get("Mão_Dr", "position.y")
	local next_hand_y_pos = curr_hand_y_pos - y_move_offset
	go.animate("Mão_Dr", "position.y", go.PLAYBACK_ONCE_FORWARD, next_hand_y_pos, go.EASING_LINEAR, 2, 0, next_callback)
end

local iter_move_y_offset = nil
local iter_move_duration = nil
function move_tora(position_y, duration, iteration, next_callback)
	if iteration <= 0 then return end -- Probably will never happen
	
	local curr_pos_y = go.get("Tora", "position.y")

	-- For first initialization
	if iter_move_y_offset == nil then
		local total_move_y_offset = position_y - curr_pos_y
		iter_move_y_offset = total_move_y_offset / iteration
		iter_move_duration = duration / iteration
	end

	local next_pos_y = curr_pos_y + iter_move_y_offset
	go.animate("Tora", "position.y", go.PLAYBACK_ONCE_FORWARD, next_pos_y, go.EASING_LINEAR, iter_move_duration, 0, function()
		local next_iter = iteration - 1
		if next_iter > 0 then
			move_dr_tora_hand(iter_move_y_offset, function()
				move_tora(0, 0, next_iter, next_callback)
			end)
		else
			move_dr_tora_hand(iter_move_y_offset, next_callback)
			iter_move_y_offset = nil
			iter_move_duration = nil
		end	
	end)
end

function prepare_tora_event()
	set_dr_hands("disable")
	set_estagiario_hand("disable")
	set_tora(DANGLING_TORA)
	spine.cancel("Mega#dangling_tora")
	play_dialog(DIALOG_TORA_SOLUTION, function()
		-- raise the status base out of screen
		-- lower the scafold even lower
		move_andaime(560, 5, function()
			-- Dr. starts lowering his tora with one hand
			move_tora(100, 5, 3, function()
				-- until it starts dangling and then it pulls it up again
				spine.play_anim("Mega#dangling_tora", "goingdown", go.PLAYBACK_LOOP_FORWARD, {playback_rate = .5})
				-- After realizing that the tora is unstable Dr. pulls
				-- the tora away, and tries with more concentration
				play_dialog(DIALOG_TORA_IS_DANGLING, function()
					move_tora(890, 2, 1, function()
						spine.play_anim("Mega#dangling_tora", "goingdown2", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
						move_tora(100, 5, 3, function()
							play_dialog(DIALOG_TORA_NOT_YET_RIGHT, function()
								move_dr_tora_hand(-100, function()
									-- Estagiario hands a helping hand to stabilize the Tora even more
									set_estagiario_hand("enable")
									spine.play_anim("Mega#dangling_tora", "goingstraight", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
									play_dialog(DIALOG_TORA_NOW_IS_WORKING, function()
										-- Finnally lower the tora to Dr. Meloncolicos brain
										-- And at the same time the dr hand goes alog
										go.animate("Mão_Dr", "position.y", go.PLAYBACK_ONCE_FORWARD, 380, go.EASING_LINEAR, 2)

										-- Play slushy noise of tora entering Dr. Melo's brain
										sound.play("Tora#tora_fart", {delay = 1.5, gain = 3, pan = 0, speed = 1})
										sound.play("DrillTip#sound", {delay = 1.5, gain = 5, pan = 0, speed = 1})
										move_tora(-200, 2, 1, function()
											-- The beam of light disappears and disable it's sound
											set_beam("disable")
											sound.stop("Beam#sound")
											-- Electricity starts surrounding the tora
											set_raios("enable")
											-- Lets start a new interactive event of tora pumping
											curr_level = INTERACTIVE_EVENT
											play_legenda("<Clique para continuar>")
										end)
									end)
								end)
							end)
						end)
					end)
				end)
			end)
		end)
	end)
end

function prepare_event()
	if curr_event == EVENT_OCTOPUS then
		prepare_octopus_event()
	elseif curr_event == EVENT_TORA then
		prepare_tora_event()
	elseif curr_event == EVENT_DECAPITATE then
		decapitate_chico()
	end
end

function is_non_input_level ()
	return curr_level == PREPARE_ROUND or
	curr_level == WAIT_PREPARE_ROUND or
	curr_level == FINAL_RESULT or
	curr_level == GAME_END or
	curr_level == PREPARE_EVENT or
	curr_level == WAIT_PREPARE_EVENT or
	curr_level == WAIT_GAME_END
end

function reset_melo_on_player_losing(next_callback)

	local function reset()
		set_hole("disable")
		set_beam("disable")
		set_raios("disable")
		set_god_eyes("disable")
		change_melo_suit(MELO_NORMAL_SUIT)
		go.animate("Melo", "scale.x", go.PLAYBACK_ONCE_FORWARD, melo_inner_init_scale.x, go.EASING_LINEAR, 2)
		go.animate("Melo", "scale.y", go.PLAYBACK_ONCE_FORWARD, melo_inner_init_scale.y, go.EASING_LINEAR, 2)
		go.animate("Melo", "position.y", go.PLAYBACK_ONCE_FORWARD, melo_inner_init_pos.y, go.EASING_LINEAR, 2, 0, next_callback)
	end

	if melo_avoiding_attacks then
		move_melo_back_to_main_position(reset)
	else
		reset(next_callback)
	end
end

function melo_laughs(time, next_callback)
	function laugh_stop()
		go.cancel_animations("Mouth", "position.y")
		sound.stop("Mouth#laughing")
		go.animate("Mouth", "position.y", go.PLAYBACK_ONCE_FORWARD, init_mouth_pos_y, go.EASING_LINEAR, 2, 0, next_callback)
	end
	
	go.animate("Mouth", "position.y", go.PLAYBACK_LOOP_PINGPONG, init_mouth_pos_y - 50, go.EASING_INOUTSINE, 0.3, 0)
	sound.play("Mouth#laughing", {delay = 0, gain = 2, pan = 0, speed = 1.2})
	timer.delay(time, false, laugh_stop)
end

function melo_talks(list_legendas, wait_after, next_callback)
	go.animate("Mouth", "position.y", go.PLAYBACK_LOOP_PINGPONG, init_mouth_pos_y - 20, go.EASING_INOUTSINE, 0.5, 0)
	sound.play("Mouth#speak")
	play_legendas(list_legendas, function()
		go.cancel_animations("Mouth", "position.y")
		sound.stop("Mouth#speak")
		go.animate("Mouth", "position.y", go.PLAYBACK_ONCE_FORWARD, init_mouth_pos_y, go.EASING_LINEAR, 2, 0, next_callback)
	end)
end

function player_loses(next_callback)
	rest_attackers()
	
	if curr_round == ROUND1 then
		-- Melo throws chico away and says something (subtitles)
		go.animate("Chico", "position.y", go.PLAYBACK_ONCE_FORWARD, -750, go.EASING_INBACK, 2, 0, function()
			reset_melo_on_player_losing(function()
				-- Change melo face to evil happy
				change_melo_face(MELO_HAPPY_FACE_NO_MOUTH, MELO_MOUTH1)
				
				-- Melo says something (subtitles)
				local melo_legendas = {
					"Meloncolico: Cambada de incompetentes, vão já para fila para trás do Quadros, PROCESSO JÁ"
				}
				melo_talks(melo_legendas, 2, function()
					-- We hear his stupid laugh
					melo_laughs(10, next_callback)
				end)				
			end)
		end)
	elseif curr_round == ROUND2 then		
		-- Change melo face to evil happy
		if currCartazHealth > 0 then
			throw_cartaz_away()
		end

		reset_melo_on_player_losing(function()
			change_melo_face(MELO_HAPPY_FACE_NO_MOUTH, MELO_MOUTH1)

			-- Melo says something (subtitles)
			local melo_legendas = {
				"Meloncolico: Tanto polvo esquerdalho morto à minha beira, vai dár para reabrir o Aleixo novamente!"
			}
			melo_talks(melo_legendas, 2, function()
				change_melo_face(MELO_HAPPY_FACE)
				-- Dr e Estagiário dialogam
				local legendas = {
					"Dr: Parece que o grande Dr. Meloncólico tratou disto sozinho",
					"Estagiário: Parece que sim, eu nunca tive dúvidas",
					"Dr: Eu tb não, mas ali por momentos o esquerdalhos quase que o tiveram na broca...",
					"Estagiário: Na broca? Qual broca?",
					"Dr: Deixe lá isso, pode ser que na proxima o senhor entenda o que eu digo, que é quase nunca!",
					"...",
					"Dr: Vamos embora que já se faz tarde, a revista não se escreve sozinha, e temos milhares de pessoas no nosso patreon às espera!",
					"Estagiário: Patreon? Revista, do que é que o Dr. está a falar?...",
					"Dr: Falo da nossa revista seu estupido? Aquela que pode comprar em https://www.patreon.com/jcdireita/posts por uns miseros 4€ + IVA",
					"Estagiário: Boa, não sabia que tinhamos uma revista, todos os dias ficamos a aprender coisas novas!",
					"Dr: Sim, o senhor faz a secção das receitas com bolicão, muito apreciada pelos leitores",
					"Estagiário: Já me lembro! E acho que a proxima vai ser escabeche de bolicão, uma delicia!",
				}
				play_legendas(legendas, function()
					-- Andaime sobe
					move_andaime(860, 5, function() end)

					-- We hear his stupid laugh
					change_melo_face(MELO_HAPPY_FACE_NO_MOUTH, MELO_MOUTH1)
					melo_laughs(10, next_callback)
				end)
			end)
		end)
	end
end

----------------------------
---------- UPDATE ----------
----------------------------

local warn_to_leave_game = false
function update(self, dt)
	if start == false then
		return
	end

	local function check_game_level_and_round()
		if is_non_input_level() or 
		curr_level == INTERACTIVE_EVENT then 
			return 
		end

		if currFachoHealth >= LEVEL1_LIMIT then
			curr_level = LEVEL0
		elseif currFachoHealth >= LEVEL2_LIMIT then
			curr_level = LEVEL1
		elseif currFachoHealth >= LEVEL3_LIMIT then
			curr_level = LEVEL2
		elseif currFachoHealth >= LEVEL4_LIMIT then
			curr_level = LEVEL3
		elseif currFachoHealth >= LEVEL5_LIMIT then
			curr_level = LEVEL4
		elseif currFachoHealth >= LEVEL6_LIMIT then
			curr_level = LEVEL5
		elseif currFachoHealth >= LEVEL7_LIMIT then
			curr_level = LEVEL6
		elseif currFachoHealth >= 0 then
			curr_level = LEVEL7
		end
	end

	local function update_cartaz_state ()
		if currCartazHealth >= CARTAZ1_LIMIT then
			msg.post("Frame#placar", "play_animation", {id = hash("placar1")})
		elseif currCartazHealth >= CARTAZ2_LIMIT then
			msg.post("Frame#placar", "play_animation", {id = hash("placar2")})
		elseif currCartazHealth >= CARTAZ3_LIMIT then
			msg.post("Frame#placar", "play_animation", {id = hash("placar3")})
		elseif currCartazHealth >= CARTAZ4_LIMIT then
			msg.post("Frame#placar", "play_animation", {id = hash("placar4")})
		elseif currCartazHealth >= CARTAZ5_LIMIT then
			msg.post("Frame#placar", "play_animation", {id = hash("placar5")})
		elseif currCartazHealth > 0 then
			msg.post("Frame#placar", "play_animation", {id = hash("placar6")})
		elseif currCartazHealth <= 0 then
			if cartaz_was_thrown == false then
				cartaz_was_thrown = true
				msg.post("Frame#placar", "play_animation", {id = hash("placar7")})
				timer.delay(0.5, false, throw_cartaz_away)
			end
		end
	end

	check_game_level_and_round ()
	
	if curr_level == PREPARE_ROUND then
		prepare_round()
		curr_level = WAIT_PREPARE_ROUND
		return
	elseif curr_level == WAIT_PREPARE_ROUND then
		return
	elseif curr_level == PREPARE_EVENT then
		prepare_event()
		curr_level = WAIT_PREPARE_EVENT
	elseif curr_level == WAIT_PREPARE_EVENT then
		return
	elseif curr_level == INTERACTIVE_EVENT then
		return
	elseif curr_level == LEVEL0 or 
	curr_level == LEVEL1 or 
	curr_level == LEVEL2 or 
	curr_level == LEVEL3 or
	curr_level == LEVEL4 or
	curr_level == LEVEL5 or
	curr_level == LEVEL6 or
	curr_level == LEVEL7 then
		if curr_round == ROUND1 then
			update_chico_state()
			update_melo_state()
		elseif curr_round == ROUND2 then
			update_cartaz_state()
			update_melo_state()
		end
	elseif curr_level == FINAL_RESULT then 
		if game_won == false then
			player_loses(function()
				print "Player WON"
				curr_level = GAME_END
			end)	
		end
		curr_level = WAIT_GAME_END
	elseif curr_level == WAIT_GAME_END then
		return
	elseif curr_level == GAME_END then
		if warn_to_leave_game == false then
			warn_to_leave_game = true
			local legendas = {"<Clique para sair do jogo>"}
			play_legendas(legendas, function()
				print "Sair do Jogo"
			end)
		end
	end
end

function process_score(hit_factor)
	local bonus_factor = 0.1 * bonus_level * score_per_hit
	curr_score = curr_score + (score_per_hit * hit_factor) + bonus_factor
	msg.post(status_bar_id, "set_score", {curr_score})
end

function process_chico_hit(head_side, attack_side)
	ai_number = math.random(1,4)
	ai_id = string.format("Chico#ai%d", ai_number)

	-- Animate and sound effects of the attack
	sound.play(ai_id, {delay = 0, gain = 3, pan = -1, speed = 1})
	animate_chico_hit()

	actual_hit_value = hit_value
	local hit_factor = 1
	if head_side == hash("left") or head_side == hash("right") then
		sound.play("Chico#slashed", {delay = 0, gain = 1, pan = 0, speed = 1})
		-- The hit atack will be reduced by 40%
		actual_hit_value = hit_value - (0.4 * hit_value);
		-- Recover only half stamina
		local stamina_to_recover = stamina_lose_value * 0.5
		recover_stamina(stamina_to_recover)
		hit_factor = 0.4
	elseif head_side == hash("center") then
		-- play extra sound
		sound.play("Chico#slashed", {delay = 0, gain = 3, pan = 0, speed = 2})
		sound.play("Chico#slashed", {delay = .5, gain = 3, pan = 0, speed = 2.5})
		-- Recover 75% stamina
		local stamina_to_recover = stamina_lose_value * 0.75
		recover_stamina(stamina_to_recover)
	end	
	
	currFachoHealth = currFachoHealth - actual_hit_value
	local hit_value_to_report = actual_hit_value
	if currFachoHealth <= 0 then
		hit_value_to_report = currFachoHealth + actual_hit_value
		currFachoHealth = 0
		
		msg.post(status_bar_id, "pause")
	end

	process_score(hit_factor)
	
	msg.post(status_bar_id, "hurt_facho", {hit_value_to_report})
end

function process_cartaz_hit()
	rip_number = math.random(1,4)
	rip_id = string.format("Cartaz#rip%d", rip_number)
	particlefx.play("Frame#CartazRipping")
	sound.play(rip_id, {delay = 0, gain = 2, pan = 0, speed = 1})
	currCartazHealth = currCartazHealth - cartaz_hit_value
end

function process_melo_hit(head_side)
	if head_side == hash("left") then
		if curr_level < LEVEL6 then
			-- play and show hair being cut
			particlefx.play("flyingHair#haircut_left")
			sound.play("polvo_esquerdo#cut_sound", {delay = 0, gain = 2, pan = -1, speed = 1})
		end
			
		if curr_level >= LEVEL4 then
			particlefx.play("Cara#blood_splash_left")
			sound.play("Chico#slashed", {delay = 0, gain = 2, pan = -1, speed = 1})
		end
	elseif head_side == hash("right") then
		if curr_level < LEVEL6 then
			-- play and show hair being cut
			particlefx.play("flyingHair#haircut_right")
			sound.play("polvo_direito#cut_sound", {delay = 0, gain = 2, pan = 1, speed = 1})
		end
		
		if curr_level >= LEVEL6 then
			particlefx.play("Cara#blood_splash_right")
			sound.play("Chico#slashed", {delay = 0, gain = 2, pan = 1, speed = 1})
		end
	end

	-- If hit are done with the cartaz on then score will be slightly higher
	local hit_factor = 1
	if currCartazHealth > 0 then
		hit_factor = 1.2
	end
	
	currFachoHealth = currFachoHealth - hit_value
	local hit_value_to_report = hit_value
	if currFachoHealth <= 0 then
		hit_value_to_report = currFachoHealth + hit_value
		currFachoHealth = 0

		msg.post(status_bar_id, "pause")
	end

	process_score(hit_factor)
	
	msg.post(status_bar_id, "hurt_facho", {hit_value_to_report})
end

---------------------------------
-------- SQUID FUNCTIONS --------
---------------------------------

local function squids_back_to_idle(side)
	if side == "left" then
		spine.play_anim("polvo_esquerdo#spinemodel", "Idle_left", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
	else
		spine.play_anim("polvo_direito#spinemodel", "Idle_Right", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
	end
end

local function attack_left()
	-- animate cut left
	sound.play("polvo_esquerdo#attack_sound", {delay = 0, gain = 2, pan = -1, speed = 1})
	spine.play_anim("polvo_esquerdo#spinemodel", "Attack", go.PLAYBACK_ONCE_FORWARD, {playback_rate = 2.5}, function()
		squids_back_to_idle("left")
	end)
end

local function attack_right()
	-- Animate cut right
	sound.play("polvo_direito#attack_sound", {delay = 0, gain = 2, pan = 1, speed = 1.2})
	spine.play_anim("polvo_direito#spinemodel", "Atack", go.PLAYBACK_ONCE_FORWARD, {playback_rate = 2.5}, function()
		squids_back_to_idle("right")
	end)
end

-------------------------------------------------------------------------
------------------------------ ON MESSAGE -------------------------------
-------------------------------------------------------------------------

local BONUS_LEVEL_LIMIT = 5
function check_continuous_attacks_and_hits()
	continuous_hit_count = continuous_hit_count + 1

	local change_bonus = true
	if continuous_hit_count ~= continuous_attack_count then
		-- reset values and bonus
		print ("Lost bonux because continuous_hits = " .. continuous_hit_count .. " and continuous attacks = " .. continuous_attack_count)
		continuous_hit_count = 0
		continuous_attack_count = 0
		bonus_level = 0
	else
		if continuous_hit_count > 0 then
			local factor = continuous_hit_count / BONUS_LEVEL_LIMIT
			if factor == 1 then
				print ("Bonus 1x, hits: " .. continuous_hit_count)
				bonus_level = 1
			elseif factor == 2 then
				print ("Bonus 2x, hits: " .. continuous_hit_count)
				bonus_level = 2
			elseif factor == 3 then
				print ("Bonus 3x, hits: " .. continuous_hit_count)
				bonus_level = 3
			elseif factor == 4 then
				print ("Bonus 4x, hits: " .. continuous_hit_count)
				bonus_level = 4
			elseif factor == 5 then
				print ("Bonus 5x, hits: " .. continuous_hit_count)
				bonus_level = 5
			else
				change_bonus = false
			end
		end
	end

	if change_bonus then
		msg.post(status_bar_id, "set_bonus_level", {bonus_level, false})
	end
end

local left_attack_ready = true
local right_attack_ready = true
local can_register_left_attack = true
local can_register_right_attack = true
function on_message(self, message_id, message, sender)
	if message_id == hash("dificulty") then
		dificulty = message[1]
	elseif message_id == hash("start") then
		start = true
	elseif message_id == hash("start_round") then
		start_round()
	elseif message_id == hash("time_over") then
		curr_level = FINAL_RESULT
	elseif message_id == hash("spine_event") then
		if message.event_id == hash("attack_left") then
			msg.post("left_attack#attack", "enable")
			left_attack_ready = true
			can_register_left_attack = true
			lose_stamina(stamina_lose_value)
			continuous_attack_count = continuous_attack_count + 1
		elseif message.event_id == hash("attack_right") then
			msg.post("right_attack#attack", "enable")
			right_attack_ready = true
			can_register_right_attack = true
			lose_stamina(stamina_lose_value)
			continuous_attack_count = continuous_attack_count + 1
		elseif message.event_id == hash("attack_left_over") then
			msg.post("left_attack#attack", "disable")
		elseif message.event_id == hash("attack_right_over") then
			msg.post("right_attack#attack", "disable")
		end
	elseif message_id == hash("chico_hit") then
		local can_attack = false
		if can_register_right_attack and message[2] == hash("/right_attack") then
			msg.post("right_attack#attack", "disable")
			can_register_right_attack = false
			can_attack = true
		elseif can_register_left_attack and message[2] == hash("/left_attack") then
			msg.post("left_attack#attack", "disable")
			can_register_left_attack = false
			can_attack = true
		end

		if can_attack then
			process_chico_hit(message[1], message[2])
			check_continuous_attacks_and_hits()
		end
	elseif message_id == hash("melo_hit") then
		local can_attack = false
		if can_register_right_attack and message[2] == hash("/right_attack") then
			msg.post("right_attack#attack", "disable")
			can_register_right_attack = false
			can_attack = true
		elseif can_register_left_attack and message[2] == hash("/left_attack") then
			msg.post("left_attack#attack", "disable")
			can_register_left_attack = false
			can_attack = true
		end
		
		if can_attack then
			process_melo_hit(message[1])
			check_continuous_attacks_and_hits()
		end
	elseif message_id == hash("cartaz_hit") then
		local can_attack = false
		if can_register_right_attack and message[1] == hash("/right_attack") then
			msg.post("right_attack#attack", "disable")
			can_register_right_attack = false
			can_attack = true
		elseif can_register_left_attack and message[1] == hash("/left_attack") then
			msg.post("left_attack#attack", "disable")
			can_register_left_attack = false
			can_attack = true
		end

		if can_attack then
			process_cartaz_hit()
		end
	end
end

function animate_dropping_toupet(next_callback)
	go.animate("Toupet", "euler.z", go.PLAYBACK_LOOP_PINGPONG, 20, go.EASING_LINEAR, 1)
	go.animate("Toupet", "position.x", go.PLAYBACK_LOOP_PINGPONG, 50, go.EASING_INOUTSINE, 2)
	go.animate("Toupet", "position.y", go.PLAYBACK_ONCE_FORWARD, 170, go.EASING_LINEAR, 8, 0, function()
		go.cancel_animations("Toupet", "euler.z")
		go.cancel_animations("Toupet", "position.x")
		go.set("Toupet", "euler.z", 0)
		go.set("Toupet", "position.x", 9.5)
		timer.delay(0.5, false, next_callback)
	end)
end

local TORA_FIRST_TRY = 1
local TORA_SECOND_TRY = 2
local TORA_THIRD_TRY = 3
local curr_tora_iteration = TORA_FIRST_TRY
local tora_wait_iteration = false
function perform_tora_action()
	if tora_wait_iteration then
		return
	else
		tora_wait_iteration = true
		clear_legendas()
		if curr_tora_iteration == TORA_FIRST_TRY then
			local legendas = {
				"Estagiário: Veja Dr.. Parece que ainda não é suficiente!",
				"Estagiario: os sonhinhos do Dr. Melo ainda se estão a escapar",
				"Dr: Esteja calado e deixe-me pensar! Estou a levar com muita energia do Dr. Melo",
				"...",
				"Dr: Já sei! Se a conseguir bombear de alguma forma consigo absorver todos os seus sonhinhos!",
				"Dr: E toda a sua sabedoria, seria como um 'mind meld' do Dr. Spock, nada ficaria perdido",
				"Dr: E quem sabe com a minha futura esposa poderiamos dár continuade ao seu legado se eu a",
				"empregnasse com toda esta energia que estou a absorver...",
				"Dr: AHHHHHHHHHHHH",
				"Estagiario: Que se passa Dr?",
				"Dr: É muito forte, tenho que começar a bombear todo este poder!"
			}
			play_legendas(legendas, function()
				curr_tora_iteration = TORA_SECOND_TRY
				tora_wait_iteration = false
				play_legenda("<Clique para começar a bombear a energia do Dr. Melo>")
			end)
		elseif curr_tora_iteration == TORA_SECOND_TRY then
			set_tora(PUMPING_TORA)
			timer.delay(3, false, function()
				-- Add more electricity coming from the sides? TODO
				local legendas = {
					"Dr: AHHHHHHHHHHHHHHHHHH",
					"Estagiario: Dr. sente-se bem??? Estou a ficar com medo!",
					"..."
				}
				play_legendas(legendas, function()
					-- Dr grabs ledge with both hands
					set_dr_hands("enable")
					local legendas = {
						"Dr: Estagiário, o poder de sucção ainda não é suficiente, vou ter que lhe pedir algo...",
						"Dr: Vai ter que fazer o sacrificio, e vai ter que me ajudar, é a unica maneira...",
						"Estagiario: Diga Dr., tudo o que eu puder fazer",
						"...",
						"Dr: Tente encontrar a minha prostata, e faça movimentos de pressão suave, isso vai-me ajudar aumentar a suçao",
						"...",
						"Estagiário: Dr? Tem a certeza?",
						"Dr: Faça o que lhe digo homem, pelo futuro do planeta!",
						"..."
					}
					play_legendas(legendas, function()
						curr_tora_iteration = TORA_THIRD_TRY
						tora_wait_iteration = false
						play_legenda("<Clique para encontrar a prostata do Dr e o ajudar a bombear mais rápido>")
					end)
				end)
			end)	
		elseif curr_tora_iteration == TORA_THIRD_TRY then
			set_estagiario_hand("disable")
			local legendas = {
				"[Estagiário a muito custo inicia a busca da prostata do Dr.]",
				"..."
			}
			play_legendas(legendas, function()
				sound.play("DrillTip#sound", {delay = 0, gain = 5, pan = 0, speed = 1})
				local legendas = {
					"Estagiário: ENCONTREI DR!!",
					"...",
					"Dr: Eu sei, agora estimule isso com cuidado, ainda vamos conseguir salvar a situação",
					"Dr: E depressa que pressinto que os tentáculos estão a acordar novamente e pode ser ainda mais perigoso",
					"..."
				}
				play_legendas(legendas, function()
					-- Para com 
					set_raios("disable")
					-- Para com os sonhinhos
					particlefx.stop("Beam#thoughts")
					sound.play("Tora#sucking", {delay = 0, gain = 1, pan = 0, speed = .8})
					spine.play_anim("Mega#pumping_tora", "pump_faster", go.PLAYBACK_LOOP_FORWARD, {playback_rate = 1})
					-- From now on we see Melo getting older
					local legendas = {
						"Estagiário: Veja Dr., está a resultar, mas algo estranho está a acontecer ao Dr. Melo",
						"Dr: Não fale comigo agora, estou muito concentrado, encontre-me aí uma foto da Odete Santos, rápido!",
						"Dr: Pode ser que acelere o processo ainda mais, e seja mais gentil com esse dedo!",
						"Estagiário: Faço o melhor que posso Dr, e não se preocupe que farto estou eu de treinar em mim próprio",
						"..."
					}
					play_legendas(legendas, function()
						-- Remove melos mouth
						set_mouth ("disable")
						-- Melo gets older each 5 seconds
						change_melo_face(MELO_NO_HAIR_OLD1)
						set_top_to_hide(TOP_NO_HAIR_OLD1)
						timer.delay(5, false, function()
							change_melo_face(MELO_NO_HAIR_OLD2)
							set_top_to_hide(TOP_NO_HAIR_OLD2)
							timer.delay(5, false, function()
								sound.stop("Tora#sucking", {delay = 0, gain = 1, pan = 0, speed = .8})
								sound.play("Tora#sucking", {delay = 0, gain = .2, pan = 0, speed = .6})
								spine.play_anim("Mega#pumping_tora", "pump", go.PLAYBACK_LOOP_FORWARD, {playback_rate = 1})
								change_melo_face(MELO_NO_HAIR_OLD3)
								set_top_to_hide(TOP_NO_HAIR_OLD3)
								-- Stop glowing eyes
								stop_melo_eyes()
								set_god_eyes("disable")
								mexe_olhos_melo(OLHOS_CIMA, 2, function()
									local legendas = {
										"Estagiário: Parece que conseguiu Dr. Não há mais energia para extrair do Dr. Melo",
										"Dr: Parece que sim, o Dr. Melo não tem mais nada para dar, é agora uma caraça inerte, carne para molusco!",
										"...",
										"Dr: Acho que está na altura de me retirar, fizemos a boa açao do dia",
										"Dr: Sinto agora que o Dr. Melo está num lugar muito melhor, bem guardado dentro deste cofre inviolável que é o meu cererbro",
										"Dr: Aquelas conversas imaginárias que tinhamos, deixarão de ser imaginárias, porque agora estarei mesmo a falar com ele cá dentro",
										"Estagiário: E eu também Dr. através de si.... Estou mesmo contente com esta boa acçao que fizemos",
										"Estagiário: O mundo está desta vez muito melhor!",
									}
									play_legendas(legendas, function()
										-- Stop sucking sound
										sound.stop("Tora#sucking", {delay = 0, gain = 1, pan = 0, speed = .8})
										-- Change penis and start pulling it out
										set_tora(DANGLING_TORA)
										spine.play_anim("Mega#dangling_tora", "goingstraight", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = 1})
										move_tora(890, 3, 1, function()
											msg.post(status_bar_id, "move_status_bar", {580})
											move_andaime(854, 5, function()
												play_dialog(DIALOG_TOUPET_DO_UNAS, function()
													-- Estagiário atira toupet do una para cima do Dr. Meloncolico
													animate_dropping_toupet(function()
														-- De seguida do polvos puxam o Dr. Meloncolico para baixo
														go.animate("Melo", "position.y", go.PLAYBACK_ONCE_FORWARD, -300, go.EASING_LINEAR, 5, 0, function()
															-- e aparece o simbolo de Friendship
															msg.post("Friendship#sprite", "enable")
															go.animate("Friendship", "position.y", go.PLAYBACK_LOOP_PINGPONG, 480, go.EASING_INOUTBACK, 2)
															raise_attackers(function () end)
															sound.play("Friendship#music", nil, function()
																-- Acaba o jogo
																sound.play("Friendship#friendship")
																game_won = true
																curr_level = FINAL_RESULT
															end)	
														end)
													end)
												end)
											end)
										end)
									end)	
								end)
							end)
						end)
					end)
				end)
			end)
		end
	end
end

------------------------------------------------------------------------------------
---------------------------------- OCTOPUS ACTION ----------------------------------
------------------------------------------------------------------------------------

function turn_melo_in_deity_mode()
	set_god_eyes("enable")
	set_beam("enable")
	particlefx.play("Beam#thoughts")
end

local OCTOPUS_FIRST_DRILL = 1
local OCTOPUS_SECOND_DRILL = 2
local OCTOPUS_LAST_DRILL = 3
local OCTOPUS_WAIT_USER_DRILL = 4
local curr_octopus_iteration = OCTOPUS_FIRST_DRILL
local octopus_wait_iteration = false

local DRILL_ACTION_TIME = 3
local drill_wait_timer = nil
function perform_octopus_action()
	if octopus_wait_iteration then
		return
	else
		octopus_wait_iteration = true
		if curr_octopus_iteration == OCTOPUS_FIRST_DRILL then
			-- Animate drill until surface (84y)
			go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 79, go.EASING_LINEAR, DRILL_ACTION_TIME, 0, function()
				-- sparkles start flying
				particlefx.play("Sparkles")
				-- small hole starts showing after 1 sec of drilling
				timer.delay(1, false, function()
					-- Start showing hole in the head
					set_hole("enable")
					-- After 4 seconds animate hole getting bigger and drill getting deeper (duration 10 secs)
					local legendas = {
						"Estagiário: É terrivel Dr., estão a perfurar o cránio do Dr. Melo, é totalmente nojento",
						"Dr: Esquerdalhos, que grandes $#$#%$%",
						"Estagiário: Dr. nem parece seu usar o meu tipo de linguagem",
						"Dr: Isto é inadmissivel, tudo porque não estou mais ao seu lado para o proteger",
						"Dr: Se eu fosse uma pessoa mais sensivel neste momento viriam-me as lágrimas aos olhos, so de ver isto",
						"Dr: Sinto-me impotente perante este cenário depressivo"
					}
					play_legendas(legendas, function()
						-- drill noise get's higher
						sound.play("Drill#hammer_drill")
						-- Olhos do melo trepidam
						mexe_olhos_melo(OLHOS_TREMEM, 0.04)
						go.animate("Buraco", "scale.x", go.PLAYBACK_ONCE_FORWARD, .8, go.EASING_LINEAR, DRILL_ACTION_TIME, 0)
						go.animate("Buraco", "scale.y", go.PLAYBACK_ONCE_FORWARD, .5, go.EASING_LINEAR, DRILL_ACTION_TIME, 0)
						go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 78, go.EASING_LINEAR, DRILL_ACTION_TIME, 0, function()
							-- drill returns back to same position and noise goes to idle
							sound.stop("Drill#hammer_drill")
							-- stop sparkles
							particlefx.stop("Sparkles")
							-- Olhos do melho param de tremer
							stop_melo_eyes()
							go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 110, go.EASING_LINEAR, DRILL_ACTION_TIME, 0, function()
								-- increase iteration
								curr_octopus_iteration = OCTOPUS_SECOND_DRILL
								-- octopus_wait_iteration = false
								octopus_wait_iteration = false
								play_legenda("<Clique para continuar a furar>")
							end)
						end)
					end)
				end)
			end)
		elseif curr_octopus_iteration == OCTOPUS_SECOND_DRILL then
			-- Animate drill until last place it drilled
			go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 72, go.EASING_LINEAR, 3, 0, function()
				-- Grow hole to size of drill while drill goes further
				-- Sparkles and bone start comming out
				particlefx.play("Sparkles")
				particlefx.play("Bones")
				-- drill noise get's higher
				sound.play("Drill#hammer_drill")
				-- Olhos do melo trepidam
				mexe_olhos_melo(OLHOS_TREMEM, 0.04)
				go.animate("Buraco", "scale.x", go.PLAYBACK_ONCE_FORWARD, 1.2, go.EASING_LINEAR, DRILL_ACTION_TIME, 0)
				go.animate("Buraco", "scale.y", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, DRILL_ACTION_TIME, 0)
				-- Drill deeper
				go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 62, go.EASING_LINEAR, DRILL_ACTION_TIME, 0, function()
					-- drill returns back to same position and noise goes to idle
					sound.stop("Drill#hammer_drill")
					-- stop sparkles and bone
					particlefx.stop("Sparkles")
					particlefx.stop("Bones")
					-- Olhos do melho param de tremer
					stop_melo_eyes()
					go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 100, go.EASING_LINEAR, DRILL_ACTION_TIME, 0, function()
						-- increase iteration
						curr_octopus_iteration = OCTOPUS_LAST_DRILL
						-- octopus_wait_iteration = false
						octopus_wait_iteration = false
						play_legenda("<Clique para continuar a furar, ainda mais>")
					end)
				end)
			end)
		elseif curr_octopus_iteration == OCTOPUS_LAST_DRILL then
			-- Change melo head to have a mouth that opens
			change_melo_face(MELO_NO_HAIR_NO_MOUTH)
			set_mouth("enable")
			-- Animate drill until top of head
			go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 65, go.EASING_LINEAR, 3, 0, function()
				-- Start full drilling
				-- Start squirting blood
				particlefx.play("BloodHole")
				particlefx.play("Bones")
				-- Slowly open Melo mouth while drilling and pull his eyes up
				mexe_olhos_melo(OLHOS_CIMA, 10, function() end)
				go.animate("Mouth", "position.y", go.PLAYBACK_ONCE_FORWARD, -225, go.EASING_LINEAR, 10)
				-- Drill deeper
				go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 45, go.EASING_LINEAR, DRILL_ACTION_TIME, 0, function()
					-- Stay there drilling until the user says otherwise...
					sound.play("/Drill#mushi_drill")
					-- Change drill to be bloody
					msg.post("Drill#sprite", "play_animation", {id = hash("drill_blood")})
					local legendas = {
						"Estagiário: Veja Dr. ele está a levar o seu tempo, é como se estivesse a gostar de estár lá dentro",
						"Dr: Quem é que não gostaria de estar dentro da grande mente do Dr. Melo? Mas não assim, não desta maneira...", 
						"Dr: Isto ultrapassa todos o limites do bom gosto e do bom senso",
						"Estagiário: Concordo, nem imagino o que estará a sentir o Dr. Melo com uma broca a ser-lhe inserida",
						"assim no crânio a sangue frio e sem anestesia, deve ser doloroso"
					}
					play_legendas(legendas, function()
						-- increase iteration
						curr_octopus_iteration = OCTOPUS_WAIT_USER_DRILL
						-- octopus_wait_iteration = false
						octopus_wait_iteration = false
						play_legenda("<Clique para deixar de furar, nós esperamos, mas não para sempre!>")
						local drill_elapsed = 0
						drill_wait_timer = timer.delay(5, true, function(self, handle, elapsed)
							drill_elapsed = drill_elapsed + elapsed
							if drill_elapsed > 15 then
								play_legenda("<Está a gostar demasiado disto, já pensou em terapia?>")
							elseif drill_elapsed > 30 then
								play_legenda("<Meu caro, se não para, teremos que ser nós a parar pos si, não achas que é demais?>")
							elseif drill_elapsed > 45 then
								play_legenda("<Já chega, ninguém aqui está interessado em batido de Dr. Meloncóligo, vá-se tratar!>")
								timer.cancel(drill_wait_timer)
							end
						end)
					end)
				end)
			end)
		elseif curr_octopus_iteration == OCTOPUS_WAIT_USER_DRILL then
			timer.cancel(drill_wait_timer)
			-- drill returns back to same position and noise goes to idle
			-- Stop particles
			particlefx.play("BloodHole")
			particlefx.stop("Bones")
			-- Change outside of hole to be bloody
			msg.post("Hole_Top#sprite", "play_animation", {id = hash("Hole_Big_Top")})
			-- Stop mush drilling sound
			sound.stop("/Drill#mushi_drill")
			go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 110, go.EASING_LINEAR, DRILL_ACTION_TIME, 0, function()
				-- Stop drill and its idle sound
				sound.stop("Drill#idle_drill")
				msg.post("Drill#sprite", "play_animation", {id = hash("drill10_b")})
				
				-- Cover drill again and go away
				sound.play("DrillTip#sound")
				go.animate("DrillTip", "euler.z", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 3, 0, function()
					-- Remove drill from scene
					move_octopus_away(function()
						-- Slowly close the mouth and turn into deity
						go.animate("Mouth", "position.y", go.PLAYBACK_ONCE_FORWARD, -175, go.EASING_LINEAR, 3, 0, function()
							-- A beam of light starts coming out of the hole and small while stuff
							turn_melo_in_deity_mode()
							rest_attackers()
							local legendas = {
								"Estagiario: Dr. está a ver o que eu estou a ver? (espantado)",
								"Dr: É verdade, a sua verdadeira essencia foi revelada, o Dr. Melo era na realidade um Deus preso numa carcaça humana",
								"Dr: Era esse o objectivo nojento daqueles polvos esquerdalhos, matar Deus ou qualquer outra divindade que se lhe assemelhe",
								"Dr: Temos que fazer algo urgentemente"
							}
							play_legendas(legendas, function()
								-- Go to next EVENT
								curr_level = PREPARE_EVENT
								curr_event = EVENT_TORA
							end)
						end)
					end)
				end)
			end)
		end
	end
end

function on_input(self, action_id, action)
	if start == false then
		return
	end

	if playing_subtitles then
		if (action_id == hash("click") or 
		action_id == hash("click_left") or 
		action_id == hash("click_right")) and action.pressed then
			skip_legenda()
		end
	end
	
	if is_non_input_level() then
		-- Do nothing on input for these states, ignore
		return
	elseif curr_level == INTERACTIVE_EVENT then
		if (action_id == hash("click") or 
		action_id == hash("click_left") or 
		action_id == hash("click_right")) and action.pressed then
			if curr_event == EVENT_OCTOPUS then
				perform_octopus_action()
			elseif curr_event == EVENT_TORA then
				perform_tora_action()
			end
		end
	else
		if currPlayerStamina <= 0 then
			-- Warn player and return
			sound.stop("Cenario#no_stamina")
			sound.play("Cenario#no_stamina", {delay = 0, gain = 3, pan = 0, speed = 1.5})
			return
		end
		if action_id == hash("click") and action.pressed then
			if nextCut == "Left" then
				attack_left()			
				nextCut = "Right"
			elseif nextCut == "Right" then
				attack_right()
				nextCut = "Left"
			end
		elseif action_id == hash("click_left") and action.pressed then
			if left_attack_ready then
				left_attack_ready = false
				attack_left()
			end
		elseif action_id == hash("click_right") and action.pressed then
			if right_attack_ready then
				right_attack_ready = false
				attack_right()
			end
		end
	end
end