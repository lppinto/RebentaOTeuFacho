local nextCut = nil
local numHits = nil
local finish_hits = 1
local numFails = 0
local wasHit = false
local continuous_hits = 0
local computed_points = false
local num_combos = 0
local game_won = false
local start = false
local dificulty = "hard"
local clicks_to_finish = 5
local facho1_time = 45
local facho2_time = 30
local total_time_left = facho1_time
local hit_value = 3
local cartaz_hit_value = 1.5
local cartaz_was_hit = false
local stamina_lose_value = 0
local stamina_recover_value = 10

-- Heath and Stamina
local maxFachoHealth = 100
local currFachoHealth = maxFachoHealth
local maxPlayerStamina = 100
local currPlayerStamina = maxPlayerStamina
local maxCartazHealth = 50
local currCartazHealth = maxCartazHealth

-- Shortcuts
local status_bar_id = "melo:/Score/GameStatus#ScoreAndStats"

-- Round levels
local ROUND1 = 1
local ROUND2 = 2
local curr_round = ROUND1

-- Event levels
local EVENT_OCTOPUS = 1
local EVENT_TORA = 2
local curr_event = nil

-- Damage levels / game states
local PREPARE_ROUND = 0
local WAIT_PREPARE_ROUND = 1
local LEVEL0 = 2
local LEVEL1 = 3
local LEVEL2 = 4
local LEVEL3 = 5
local LEVEL4 = 6
local LEVEL5 = 7
local LEVEL6 = 8
local LEVEL7 = 9
local FINISHING_LEVEL = 10
local FINAL_RESULT = 11
local GAME_END = 12
local PREPARE_EVENT = 13
local WAIT_PREPARE_EVENT = 14
local INTERACTIVE_EVENT = 15
local curr_level = PREPARE_ROUND
local number_of_levels = 8

-- To compute cartaz state for ROUND2
local CARTAZ_STATES = 7
local max_cartaz_hits_to_take = maxCartazHealth / cartaz_hit_value
local cartaz_hits_per_state = max_cartaz_hits_to_take / CARTAZ_STATES

-- To compute game levels
local max_hits_to_take = maxFachoHealth / hit_value
local hits_per_level = max_hits_to_take / number_of_levels

-- Initial object positions
local melo_inner_init_pos = nil
local melo_inner_init_scale = nil
local chicohead_init_scale = nil

-- Utility functions to be gatheres in a common script
local function animate_object(id, properties, playback, tos, easing, duration)
	for index, property in ipairs(properties) do
		go.animate(id, property, playback, tos[index], easing, duration, 0)
	end
end

-- Compute level limits
local LEVEL0_LIMIT
local LEVEL1_LIMIT
local LEVEL2_LIMIT
local LEVEL3_LIMIT
local LEVEL4_LIMIT
local LEVEL5_LIMIT
local LEVEL6_LIMIT
local LEVEL7_LIMIT

local CARTAZ1_LIMIT
local CARTAZ2_LIMIT
local CARTAZ3_LIMIT
local CARTAZ4_LIMIT
local CARTAZ5_LIMIT
local CARTAZ6_LIMIT
local CARTAZ7_LIMIT

function compute_limits()
	LEVEL0_LIMIT = maxFachoHealth - (hits_per_level * hit_value * (LEVEL0 - 2))
	LEVEL1_LIMIT = maxFachoHealth - (hits_per_level * hit_value * (LEVEL1 - 2))
	LEVEL2_LIMIT = maxFachoHealth - (hits_per_level * hit_value * (LEVEL2 - 2))
	LEVEL3_LIMIT = maxFachoHealth - (hits_per_level * hit_value * (LEVEL3 - 2))
	LEVEL4_LIMIT = maxFachoHealth - (hits_per_level * hit_value * (LEVEL4 - 2))
	LEVEL5_LIMIT = maxFachoHealth - (hits_per_level * hit_value * (LEVEL5 - 2))
	LEVEL6_LIMIT = maxFachoHealth - (hits_per_level * hit_value * (LEVEL6 - 2))
	LEVEL7_LIMIT = maxFachoHealth - (hits_per_level * hit_value * (LEVEL7 - 2))

	CARTAZ1_LIMIT = maxCartazHealth - (cartaz_hits_per_state * cartaz_hit_value * 1)
	CARTAZ2_LIMIT = maxCartazHealth - (cartaz_hits_per_state * cartaz_hit_value * 2)
	CARTAZ3_LIMIT = maxCartazHealth - (cartaz_hits_per_state * cartaz_hit_value * 3)
	CARTAZ4_LIMIT = maxCartazHealth - (cartaz_hits_per_state * cartaz_hit_value * 4)
	CARTAZ5_LIMIT = maxCartazHealth - (cartaz_hits_per_state * cartaz_hit_value * 5)
	CARTAZ6_LIMIT = maxCartazHealth - (cartaz_hits_per_state * cartaz_hit_value * 6)
	CARTAZ7_LIMIT = maxCartazHealth - (cartaz_hits_per_state * cartaz_hit_value * 7)
end

local function combo_off(self, handle, elapsed)
	continuous_hits = 0
end

function init(self)
	msg.post(".", "acquire_input_focus")
	
	nextCut = "Left"
	numHits = 0
	numFails = 0
	wasHit = false
	continuous_hits = 0
	computed_points = false
	num_combos = 0

	-- Save initial positions
	melo_inner_init_pos = go.get_position("Melo")
	melo_inner_init_scale = go.get_scale("Melo")
	chicohead_init_scale = go.get_scale("ChicoHead")

	-- Compute level limits
	compute_limits()
	
	-- TODO
	start = true
end

function player_loses()		

end

------------------------ CHICO AREA ------------------------

function set_chico_ferida(number, state)
	local ferida_id = string.format("Feridas#ferida%d", number)
	msg.post(ferida_id, state)
end

local last_ferida_level_set = nil
function change_chico_ferida()
	if curr_level > LEVEL1 and curr_level <= LEVEL7 and last_ferida_level_set ~= curr_level then
		last_ferida_level_set = curr_level
		local ferida_number = curr_level - LEVEL1
		set_chico_ferida (ferida_number, "enable")
	end
end

function animate_chico_hit()
	go.set_scale(chicohead_init_scale, "ChicoHead")
	msg.post("ChicoHead#sprite", "play_animation", {id = hash("hit")})
	go.animate("ChicoHead", "scale.x", go.PLAYBACK_ONCE_BACKWARD, 0.27, go.EASING_OUTELASTIC, 0.2)
	go.animate("ChicoHead", "scale.y", go.PLAYBACK_ONCE_BACKWARD, 0.27, go.EASING_OUTELASTIC, 0.2)
end

function animate_chico_dead()
	msg.post("ChicoHead#sprite", "play_animation", {id = hash("chico_morto")})
	msg.post("BloodMask#sprite", "enable")

	-- Stop all chico animations
	go.cancel_animations("Chico", "euler.z")
end

function update_chico_state()
	-- Delete all the stuff not needed for chico right now
	if curr_level < LEVEL0 then
		-- Set normal first face
		msg.post("ChicoHead#sprite", "play_animation", {id = hash("chico_preocupado")})
		-- No wounds visible
		for i = 1,6 do
			set_chico_ferida(i, "disable")
		end
		-- No blood mask visible
		msg.post("BloodMask#sprite", "disable")
	elseif curr_level <= LEVEL7 then
		change_chico_ferida()
		if wasHit then
			ai_number = math.random(1,4)
			ai_id = string.format("Chico#ai%d", ai_number)

			sound.play("Chico#slashed", {delay = 0, gain = 1, pan = 0, speed = 1})
			animate_chico_hit()
			sound.play(ai_id, {delay = 0, gain = 3, pan = -1, speed = 1})

			currFachoHealth = currFachoHealth - hit_value
			local hit_value_to_report = hit_value
			if currFachoHealth < 0 then
				hit_value_to_report = currFachoHealth + hit_value
				currFachoHealth = 0

				animate_chico_dead()
				
				-- Let's prepare for Melo's Round!
				curr_round = ROUND2
				curr_level = PREPARE_ROUND

				msg.post(status_bar_id, "pause")				
			end
			
			msg.post(status_bar_id, "hurt_facho", {hit_value_to_report})
			
			wasHit = false
		end
	end
end

------------------------ MELO AREA ------------------------

function set_hole (state)
	msg.post("Hole_Back#sprite", state)
	msg.post("Hole_Top#sprite", state)
	msg.post("Top_To_Hide_Drill#sprite", state) 
end

function set_beam (state)
	msg.post("Beam#sprite", state)
end 

function set_raios (state)
	msg.post("Raios#sprite", state)
end

function set_mouth (state)
	msg.post("Mouth#sprite", state)
end

function set_god_eyes(state)
	msg.post("god_eyes#sprite", state)
end

local OLHOS_DIR = 0
local OLHOS_ESQ = 1
local OLHOS_CIMA = 2
local OLHOS_BAIXO = 3
local OLHOS_TROCADOS = 4
local OLHOS_TREMEM = 5
local OLHOS_CENTRO = 6
function mexe_olhos_melo (dir, duration, callback)
	if dir == OLHOS_DIR then
		go.animate("olhos", "position.x", go.PLAYBACK_ONCE_FORWARD, 16, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_ESQ then
		go.animate("olhos", "position.x", go.PLAYBACK_ONCE_FORWARD, -17, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_CIMA then
		go.animate("olhos", "position.y", go.PLAYBACK_ONCE_FORWARD, 26, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_BAIXO then
		go.animate("olhos", "position.y", go.PLAYBACK_ONCE_FORWARD, -14, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_TROCADOS then
		go.animate("olho_direito", "position.x", go.PLAYBACK_ONCE_FORWARD, -20, go.EASING_LINEAR, duration)
		go.animate("olho_esquerdo", "position.x", go.PLAYBACK_ONCE_FORWARD, 20, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_TREMEM then
		go.animate("olhos", "position.y", go.PLAYBACK_LOOP_PINGPONG, 15, go.EASING_OUTBOUNCE, 0.1)
	elseif dir == OLHOS_CENTRO then
		go.animate("olho_direito", "position.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, duration)
		go.animate("olho_esquerdo", "position.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, duration)
		go.animate("olhos", "position.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, duration)
		go.animate("olhos", "position.y", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, duration, 0, callback)
	end
end

function param_olhos_melo ()
	go.cancel_animations("olho_direito", "position.x")
	go.cancel_animations("olho_esquerdo", "position.x")
	go.cancel_animations("olhos", "position.x")
	go.cancel_animations("olhos", "position.y")

	mexe_olhos_melo(OLHOS_CENTRO, 1, function() end)
end

local MELO_HAPPY_FACE = "Cabeça1"
local MELO_NORMAL_FACE = "Cabeça2"
local MELO_NORMAL_FACE_MAD = "Cabeça2_mad"
local NELO_NORMAL_FACE_AFRAID = "Cabeça2_afraid"
local MELO_LESS_HAIR_FACE = "Cabeça3"
local MELO_LESS_HAIR_FACE_AFRAID = "Cabeça3_afraid"
local MELO_EVEN_LESS_HAIR_FACE = "Cabeça4"
local MELO_EVEN_LESS_HAIR_FACE_AFRAID = "Cabeça4_afraid"
local MELO_NO_HAIR_FACE = "Cabeça5"
local MELO_NO_HAIR_NO_MOUTH = "Cabeça5_afraid_no_mouth"
local MELO_NO_HAIR_OLD1 = "Cabeça6"
local MELO_NO_HAIR_OLD2 = "Cabeça7"
local MELO_NO_HAIR_OLD3 = "Cabeça8"
function change_melo_face(type)
	msg.post("Cara#sprite", "play_animation", {id = hash(type)})
end

_G["MELO_FACE_LEVEL0"] = "Cabeça2"
_G["MELO_FACE_LEVEL1"] = "Cabeça2_afraid"
_G["MELO_FACE_LEVEL2"] = "Cabeça3"
_G["MELO_FACE_LEVEL3"] = "Cabeça3_afraid"
_G["MELO_FACE_LEVEL4"] = "Cabeça4"
_G["MELO_FACE_LEVEL5"] = "Cabeça4_afraid"
_G["MELO_FACE_LEVEL6"] = "Cabeça5"
_G["MELO_FACE_LEVEL7"] = "Cabeça5_afraid"
function change_melo_face_per_level(level_number)
	local var_name = "MELO_FACE_LEVEL" .. level_number;
	local face_id = _G[var_name];
	msg.post("Cara#sprite", "play_animation", {id = hash(face_id)})
end

local MELO_NORMAL_SUIT = "FatoDoMelo"
local MELO_SQUID_SUIT = "FatoWithSquids"
function change_melo_suit(type)
	msg.post("Fato#sprite", "play_animation", {id = hash(type)})
end

local cartaz_was_not_thrown = true
function throw_cartaz_away(self, handle, elapsed)
	-- Dr says something about Manuel Monteiro
	go.cancel_animations("Cartaz", "euler.z")
	local curr_rotation = get_object_rotation("Cartaz")
	local rotation = curr_rotation + 180
	go.animate("Cartaz", "euler.z", go.PLAYBACK_ONCE_FORWARD, rotation, go.EASING_LINEAR, 1.5, 0)
	go.animate("Cartaz", "position.x", go.PLAYBACK_ONCE_FORWARD, 500, go.EASING_LINEAR, 1.5, 0)
end

function update_melo_state(next_callback)
	if curr_round == 1 then
		-- hide all the stuff not needed for melo right now
		set_hole("disable")
		set_beam("disable")
		set_raios("disable")
		set_mouth("disable")
		set_god_eyes("disable")
		change_melo_face(MELO_HAPPY_FACE)
		change_melo_suit(MELO_NORMAL_SUIT)
	elseif curr_round == 2 then
		if curr_level < LEVEL0 then
			-- hide all the stuff not needed for melo right now
			set_hole("disable")
			set_beam("disable")
			set_raios("disable")
			set_mouth("disable")
			set_god_eyes("disable")
			change_melo_face(MELO_NORMAL_FACE_MAD)
			change_melo_suit(MELO_SQUID_SUIT)
			go.animate("Melo", "scale.x", go.PLAYBACK_ONCE_FORWARD, melo_inner_init_scale.x, go.EASING_LINEAR, 2)
			go.animate("Melo", "scale.y", go.PLAYBACK_ONCE_FORWARD, melo_inner_init_scale.y, go.EASING_LINEAR, 2)
			go.animate("Melo", "position.y", go.PLAYBACK_ONCE_FORWARD, melo_inner_init_pos.y, go.EASING_LINEAR, 2)
			currFachoHealth = maxFachoHealth
		elseif curr_level <= LEVEL7 then
			change_melo_face_per_level(curr_level - LEVEL0)
			if wasHit then
				currFachoHealth = currFachoHealth - hit_value
				local hit_value_to_report = hit_value

				if currFachoHealth < 0 then
					hit_value_to_report = currFachoHealth + hit_value
					currFachoHealth = 0

					-- Get rid of cartaz if it's still there
					if currCartazHealth > 0 then
						cartaz_was_not_thrown = false
						throw_cartaz_away()
					end
					
					msg.post(status_bar_id, "pause")

					-- Let's prepare for the finishing even and for what comes next
					curr_level = PREPARE_EVENT
					curr_event = EVENT_OCTOPUS
				end

				msg.post(status_bar_id, "hurt_facho", {hit_value_to_report})
				wasHit = false
			elseif cartaz_was_hit then
				rip_number = math.random(1,4)
				rip_id = string.format("Cartaz#rip%d", rip_number)
				sound.play(rip_id, {delay = 0, gain = 2, pan = 0, speed = 1})
				
				currCartazHealth = currCartazHealth - cartaz_hit_value
				particlefx.play("Frame#CartazRipping")
				cartaz_was_hit = false
			end
		end
	end
end

function raise_melo_hand_wave(next_callback)
	local curr_hand_pos = go.get_position("wavingHand")
	go.animate("wavingHand", "position.y", go.PLAYBACK_ONCE_FORWARD, -164, go.EASING_LINEAR, 2, 0, function()
		timer.delay(1, false, function ()
			-- Wave
			go.animate("wavingHand", "rotation.z", go.PLAYBACK_LOOP_PINGPONG, -.2, go.EASING_LINEAR, 1)
			timer.delay(2, false, function ()
				print "Stoping waving"
				go.cancel_animations("wavingHand", "rotation.z")
				-- Put hand back
				go.animate("wavingHand", "position.y", go.PLAYBACK_ONCE_FORWARD, curr_hand_pos.y, go.EASING_LINEAR, 1, 0, next_callback)
			end)
		end)
	end)
end

function ready_attackers(next_callback)
	local function idle_tentacles()
		spine.play_anim("polvo_esquerdo#spinemodel", "Idle_left", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
		spine.play_anim("polvo_direito#spinemodel", "Idle_Right", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
	end

	local function raise_tentacles()
		spine.play_anim("polvo_esquerdo#spinemodel", "Rise_Left", go.PLAYBACK_ONCE_FORWARD, {playback_rate = .5})
		spine.play_anim("polvo_direito#spinemodel", "Rise_Right", go.PLAYBACK_ONCE_FORWARD, {playback_rate = .5}, idle_tentacles)
	end

	-- Wait 5 seconds to raise the tentacles
	timer.delay(2, false, raise_tentacles)
	if next_callback ~= nil then
		timer.delay(4, false, next_callback)
	end
end

function rest_attackers (next_callback)
	local function rest_tentacles()
		spine.play_anim("polvo_esquerdo#spinemodel", "Dorment_Left", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
		spine.play_anim("polvo_direito#spinemodel", "Dorment_Right", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
	end

	local function lower_tentacles()
		spine.play_anim("polvo_esquerdo#spinemodel", "Lower_Left", go.PLAYBACK_ONCE_FORWARD, {playback_rate = .5})
		spine.play_anim("polvo_direito#spinemodel", "Lower_Right", go.PLAYBACK_ONCE_FORWARD, {playback_rate = .5}, rest_tentacles)
	end

	-- Wait 2 secs for next callback
	timer.delay(2, false, lower_tentacles)
	if next_callback ~= nil then
		timer.delay(2, false, next_callback)
	end
end

function raise_attackers (next_callback)
	-- Raise squids
	go.animate("polvo_esquerdo", "position.y", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 2)
	go.animate("polvo_direito", "position.y", go.PLAYBACK_ONCE_FORWARD, 2, go.EASING_LINEAR, 2)
	
	ready_attackers(next_callback)
end

function foreshadow_attack(next_callback)
	-- People stop clapping
	sound.stop("Melo#palmas");
	timer.delay(1, false, function()
		change_melo_face(MELO_NORMAL_FACE)
	end)
	
	timer.delay(1, false, function()
		sound.play("Cenario#crowd_afraid")
	end)
	
	timer.delay(1, false, function()
		raise_attackers(next_callback)
	end)
end

function melo_looks_around (speed, next_callback)
	mexe_olhos_melo(OLHOS_DIR, speed, function()
		mexe_olhos_melo(OLHOS_ESQ, speed, function()
			mexe_olhos_melo(OLHOS_CENTRO, speed, next_callback)
		end)
	end)
end

function raise_chico(next_callback)
	go.animate("Melo", "position.y", go.PLAYBACK_ONCE_FORWARD, melo_inner_init_pos.y - 60, go.EASING_LINEAR, 2)
	go.animate("Melo", "scale.x", go.PLAYBACK_ONCE_FORWARD, 0.9, go.EASING_LINEAR, 2)
	go.animate("Melo", "scale.y", go.PLAYBACK_ONCE_FORWARD, 0.9, go.EASING_LINEAR, 2)
	go.animate("Chico", "position.y", go.PLAYBACK_ONCE_FORWARD, -450, go.EASING_LINEAR, 1, 0)
	go.animate("Chico", "position.x", go.PLAYBACK_ONCE_FORWARD, 480, go.EASING_LINEAR, 1, 0)
	go.animate("Chico", "euler.z", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 1, 0, next_callback)
end

function get_object_rotation(id)
	local rotation_z = go.get(id, "euler.z")
	return rotation_z
end

local chico_rot = 20
local chico_first_rot_iter = true
local chico_next_rot = nil
function start_moving_chico()
	if chico_first_rot_iter then
		local curr_rotation = get_object_rotation("Chico")
		local rotation = curr_rotation + chico_rot
		chico_next_rot = curr_rotation - chico_rot
		go.animate("Chico", "euler.z", go.PLAYBACK_ONCE_FORWARD, rotation, go.EASING_LINEAR, 1, 0, start_moving_chico)
		chico_first_rot_iter = false
	else
		go.animate("Chico", "euler.z", go.PLAYBACK_LOOP_PINGPONG, chico_next_rot, go.EASING_LINEAR, 2, 0)
	end
end

local cartaz_rot = 25
local cartaz_first_iter = true
local cartaz_next_rot = nil
function start_moving_cartaz()
	if cartaz_first_iter then
		local curr_rotation = get_object_rotation("Cartaz")
		local rotation = curr_rotation + cartaz_rot
		cartaz_next_rot = curr_rotation - cartaz_rot
		go.animate("Cartaz", "euler.z", go.PLAYBACK_ONCE_FORWARD, rotation, go.EASING_LINEAR, 1.5, 0, start_moving_cartaz)
		cartaz_first_iter = false
	else
		go.animate("Cartaz", "euler.z", go.PLAYBACK_LOOP_PINGPONG, cartaz_next_rot, go.EASING_LINEAR, 2, 0)
	end
end

-- This is where the party starts
local stamina_timer = nil
function start_round()
	-- Increase player stamina each 5 secods until max is reached
	local function start_stamina_time()
		if stamina_time ~= nill then timer.cancel(stamina_timer) end
		
		stamina_timer = timer.delay(5, true, function()
			if currPlayerStamina < 100 then
				currPlayerStamina = currPlayerStamina + stamina_recover_value -- 10% increase
				local stamina_to_give = stamina_recover_value
				if currPlayerStamina > 100 then 
					stamina_to_give = stamina_recover_value - currPlayerStamina - maxPlayerStamina
					currPlayerStamina = 100 -- Don't overflow
				end

				-- Comunicate to the status status_bar_id
				msg.post(status_bar_id, "give_player", {stamina_to_give})
			end
		end)
	end
	
	if curr_round == ROUND1 then	
		curr_level = LEVEL0
		start_stamina_time()
		start_moving_chico()
	elseif curr_round == ROUND2 then
		curr_level = LEVEL0
		start_stamina_time()
		start_moving_cartaz()
	end
end

function start_first_dialog(next_callback)
	--- It's the doctor and his intern
	-- Estagiario: "Dr Dr! Veja, O Dr. Meloncolico está numa grande alhada"
	-- Dr: "Nunca imaginei ver o meu grande ex mentor numa situação destas, rodeado de polvos esquerdalhos 
	--- gigantescos atacá-lo por todos os lados, é inadmissivel"
	--- Estagiário: "Tem que haver alguma forma de o podermos ajudar, afinal de contas ele foi um dos responsáveis
	--- por afundar o CDS e ter catapultado o Dr. Jovem para a ribalta, eu nem dormia se não tentassemos alguma coisa
	--- como prova da nossa gratidão..."
	--- Dr: "O Estagiário nunca costuma ter razão, mas desta vez é bem capaz de ter suplantado a sua amiba amestrada... 
	--- Procure qualquer coisa aí em cima no sotão que possamos usar para o ajudar...
	--- Estagiario: Dr. só encontrei o Dr. Manuel Monteiro deitado em posição fetal, e um poster antigo de umas eleições
	--- com a cara do mesmo Dr. Monteiro, o que é que prefere
	--- Dr: Passe para cá o poster
	print("Dialog happens")
	timer.delay(2, false, next_callback)
end

function move_andaime(y_position, duration, next_callback)
	sound.play("Andaime#andaime_going", {delay = 0, gain = 1, pan = 0, speed = 1})
	go.animate("Andaime", "position.y", go.PLAYBACK_ONCE_FORWARD, y_position, go.EASING_INOUTBACK, duration, 0, function()
		sound.stop("Andaime#andaime_going")
		sound.play("Andaime#andaime_stop", {delay = 0, gain = 1, pan = 0, speed = 1}, next_callback)
	end)
end

----------------------------------------------------------------------------
-------------------------- GAME ROUND PREPARATION --------------------------
----------------------------------------------------------------------------

function prepare_round()
	
	local function round1 (next_callback)
		msg.post(status_bar_id, "prepare", {2})

		update_melo_state()
		update_chico_state()

		-- People start clapping
		sound.play("Melo#palmas");
		
		-- One second later melo raises hand and waves
		timer.delay(1, false, function()
			raise_melo_hand_wave(function()
				melo_looks_around(1, function()
					foreshadow_attack(function()
						melo_looks_around(0.5, function()
							raise_chico(function()
								msg.post(status_bar_id, "facho_name", {"Dr. Chiquinho"})
								msg.post(status_bar_id, "set_time", {facho1_time})
								msg.post(status_bar_id, "start", {ROUND1, maxFachoHealth})
							end)
						end)
					end)
				end)
			end)
		end)
	end

	local function round2 (next_callback)
		-- People start screaming in horror
		-- sound.play("Cenario#crowd_afraid")
		
		-- Melo drops chico.
		go.animate("Chico", "position.y", go.PLAYBACK_ONCE_FORWARD, -750, go.EASING_INBACK, 2)

		-- comes back to same position but now with octopus suit
		update_melo_state()
		-- Melo say something nasty about the uselessnes of chico
		-- Octopus attacker rests again for awhile while people shout again in horror
		rest_attackers(function()
			-- The Andaime slowly get's down and we hear some one talking from above
			-- also lower status bar to be seen
			msg.post(status_bar_id, "lower_status_bar", {510})
			move_andaime(730, 5, function()
				-- Estagiario and Dr. start talking here
				start_first_dialog(function()
					mexe_olhos_melo(OLHOS_CIMA, 1, function()
						mexe_olhos_melo(OLHOS_CENTRO, 1, function()
							change_melo_face(MELO_NORMAL_FACE)
							-- Dr. pega no cartaz e coloca-o em frente à cara do Dr Melo
							go.animate("Cartaz", "position.y", go.PLAYBACK_ONCE_FORWARD, 30, go.EASING_LINEAR, 2, 0, function()
								msg.post(status_bar_id, "facho_name", {"Dr. Meloncolico"})
								msg.post(status_bar_id, "add_time", {facho2_time})

								timer.delay(2, false, function()
									-- Polvos acordam novamente 
									raise_attackers(function()
										timer.delay(1, false, function()
											-- Começa o Round2	
											msg.post(status_bar_id, "start", {ROUND2, maxFachoHealth})
										end)
									end)
								end)
							end)
						end)
					end)
				end)
			end)
		end)
	end

	if curr_round == ROUND1 then
		round1()
	elseif curr_round == ROUND2 then
		round2()
	end
end

---------------------------------------------------------------------------
-------------------------- OCTOPUS PREPARE EVENT --------------------------
---------------------------------------------------------------------------

function dialog_about_the_octopus(next_callback)
	-- TODO: Insert Dialog
	timer.delay(2, false, next_callback)
end

function move_octopus_in_place(next_callback)
	sound.play("FullDrill#music")
	go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 110, go.EASING_LINEAR, 5, 0, function()
		go.animate("FullDrill", "euler.z", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 5, 0)
		go.animate("FullDrill", "position.x", go.PLAYBACK_ONCE_FORWARD, 61.5, go.EASING_LINEAR, 5, 0, function()
			timer.delay(2, false, next_callback)
		end)
	end)
end

function move_octopus_away(next_callback)
	sound.stop("FullDrill#music")
	go.animate("FullDrill", "euler.z", go.PLAYBACK_ONCE_FORWARD, -20, go.EASING_LINEAR, 5, 0, next_callback)
	go.animate("FullDrill", "position.x", go.PLAYBACK_ONCE_FORWARD, 180, go.EASING_LINEAR, 5, 0, function()
		go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, -310, go.EASING_LINEAR, 5, 0)
	end)
end

function prepare_octopus_event()
	-- Start bringing the octopus inside the ring
	-- Music of the octopus stars playing
	-- Melo looks scared
	-- The octoputs sets in position right above Melo's head
	move_octopus_in_place(function()
		-- Dr and Estagiário start another dialog about the huge octopus
		dialog_about_the_octopus(function()
			-- The tip of the octopus opens up revealing a drill and plays slimy sound
			sound.play("DrillTip#sound")
			go.animate("DrillTip", "euler.z", go.PLAYBACK_ONCE_FORWARD, -180, go.EASING_LINEAR, 3)

			-- The drill starts working
			timer.delay(3, false, function()
				sound.set_gain("FullDrill#music", 0.3)
				sound.play("Drill#idle_drill", {delay = 0, gain = .5, pan = 0, speed = 1})
				msg.post("Drill#sprite", "play_animation", {id = hash("Drill")})

				-- This gives control to the player to drill at least 3 times until a big hole is done
				curr_level = INTERACTIVE_EVENT
			end)
		end)
	end)
end

------------------------------------------------------------------------
-------------------------- TORA PREPARE EVENT --------------------------
------------------------------------------------------------------------

function set_dr_hands(state)
	msg.post("MaoDrDireita#sprite", state)
	msg.post("MaoDrEsquerda#sprite", state)
end

function set_estagiario_hand(state)
	msg.post("Mão_estagiario#sprite", state)
end

local DANGLING_TORA = 1
local PUMPING_TORA = 2
local curr_tora = DANGLING_TORA -- default
function set_tora(type)
	if type == DANGLING_TORA then
		msg.post("Mega#pumping_tora", "disable")
		msg.post("Mega#dangling_tora", "enable")
	elseif type == PUMPING_TORA then
		msg.post("Mega#pumping_tora", "enable")
		msg.post("Mega#dangling_tora", "disable")
	end
end

function move_dr_tora_hand(y_move_offset, next_callback)
	-- Move Dr hand back the negative offset
	local curr_hand_y_pos = go.get("Mão_Dr", "position.y")
	local next_hand_y_pos = curr_hand_y_pos - y_move_offset
	go.animate("Mão_Dr", "position.y", go.PLAYBACK_ONCE_FORWARD, next_hand_y_pos, go.EASING_LINEAR, 2, 0, next_callback)
end

local iter_move_y_offset = nil
local iter_move_duration = nil
function move_tora(position_y, duration, iteration, next_callback)
	if iteration <= 0 then return end -- Probably will never happen
	
	local curr_pos_y = go.get("Tora", "position.y")

	-- For first initialization
	if iter_move_y_offset == nil then
		local total_move_y_offset = position_y - curr_pos_y
		iter_move_y_offset = total_move_y_offset / iteration
		iter_move_duration = duration / iteration
	end

	local next_pos_y = curr_pos_y + iter_move_y_offset
	go.animate("Tora", "position.y", go.PLAYBACK_ONCE_FORWARD, next_pos_y, go.EASING_LINEAR, iter_move_duration, 0, function()
		local next_iter = iteration - 1
		if next_iter > 0 then
			move_dr_tora_hand(iter_move_y_offset, function()
				move_tora(0, 0, next_iter, next_callback)
			end)
		else
			move_dr_tora_hand(iter_move_y_offset, next_callback)
			iter_move_y_offset = nil
			iter_move_duration = nil
		end	
	end)
end

local TORA_DIALOG_SOLUTION = 1
local TORA_DIALOG_DANGLING = 2
local TORA_DIALOG_NOT_YET = 3
local TORA_DIALOG_NOW_IS_WORKING = 4
function dialog_about_dr_melo(tora_dialog, next_callback)
	-- TODO: Insert Dialog
	if tora_dialog == TORA_DIALOG_SOLUTION then
		-- Dr. Unzips his trousers, and in from of the shocked estagiario takes out his enormous tora out
		print "Dialog Tora Solution"
	elseif tora_dialog == TORA_DIALOG_DANGLING then
		print "Dialog Tora dangling"
	elseif tora_dialog == TORA_DIALOG_NOT_YET then
		print "Dialog Tora not yet"
	elseif tora_dialog == TORA_DIALOG_NOW_IS_WORKING then
		print "Dialog Tora now is working"
	end
	timer.delay(5, false, next_callback)
end

function prepare_tora_event()
	set_dr_hands("disable")
	set_estagiario_hand("disable")
	set_tora(DANGLING_TORA)
	spine.cancel("Mega#dangling_tora")
	dialog_about_dr_melo(TORA_DIALOG_SOLUTION, function()
		-- raise the status base out of screen
		-- lower the scafold even lower
		move_andaime(560, 5, function()
			-- Dr. starts lowering his tora with one hand
			move_tora(100, 5, 3, function()
				-- until it starts dangling and then it pulls it up again
				spine.play_anim("Mega#dangling_tora", "goingdown", go.PLAYBACK_LOOP_FORWARD, {playback_rate = .5})
				-- After realizing that the tora is unstable Dr. pulls
				-- the tora away, and tries with more concentration
				dialog_about_dr_melo(TORA_DIALOG_DANGLING, function()
					move_tora(890, 2, 1, function()
						spine.play_anim("Mega#dangling_tora", "goingdown2", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
						move_tora(100, 5, 3, function()
							dialog_about_dr_melo(TORA_DIALOG_NOT_YET, function()
								move_dr_tora_hand(-100, function()
									-- Estagiario hands a helping hand to stabilize the Tora even more
									set_estagiario_hand("enable")
									spine.play_anim("Mega#dangling_tora", "goingstraight", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
									dialog_about_dr_melo(TORA_DIALOG_NOW_IS_WORKING, function()
										-- Finnally lower the tora to Dr. Meloncolicos brain
										move_tora(-200, 1, 1, function()
											-- Move Dr. hand 
											go.animate("Mão_Dr", "position.y", go.PLAYBACK_ONCE_FORWARD, 380, go.EASING_LINEAR, 2)
											-- The beam of light disappears and disable it's sound
											set_beam("disable")
											sound.stop("Beam#sound")
											-- The dream particles also stop running up
											particlefx.stop("Beam#thoughts")
											-- Electricity starts surrounding the tora
											set_raios("enable")

											-- Lets start a new interactive event of tora pumping
										end)
									end)
								end)
							end)
						end)
					end)
				end)
			end)
		end)
	end)
	
	-- His play is to close the hole in Dr. Melos so his knowledge wont be lost
	-- But this brings seconds side effects, the power of Dr. Melo is so big that it provoques a 
	-- reverterd orgasm entropy to the Dr. himself. He his absorving what's left of Dr. Melo. It's Magical
	-- The Dr. does some reversed orgasmic sounds with his mouth and the Estagiario says something
	return
end

function prepare_event()
	if curr_event == EVENT_OCTOPUS then
		prepare_octopus_event()
	elseif curr_event == EVENT_TORA then
		prepare_tora_event()
	end
end

function is_non_input_level ()
	return curr_level == PREPARE_ROUND or
	curr_level == WAIT_PREPARE_ROUND or
	curr_level ==  FINAL_RESULT or
	curr_level ==  GAME_END or
	curr_level ==  PREPARE_EVENT or
	curr_level ==  WAIT_PREPARE_EVENT
end

function update(self, dt)

	local function check_game_level_and_round()

		if is_non_input_level() or 
		curr_level == INTERACTIVE_EVENT then 
			return 
		end

		if currFachoHealth >= LEVEL1_LIMIT then
			curr_level = LEVEL0
		elseif currFachoHealth >= LEVEL2_LIMIT then
			curr_level = LEVEL1
		elseif currFachoHealth >= LEVEL3_LIMIT then
			curr_level = LEVEL2
		elseif currFachoHealth >= LEVEL4_LIMIT then
			curr_level = LEVEL3
		elseif currFachoHealth >= LEVEL5_LIMIT then
			curr_level = LEVEL4
		elseif currFachoHealth >= LEVEL6_LIMIT then
			curr_level = LEVEL5
		elseif currFachoHealth >= LEVEL7_LIMIT then
			curr_level = LEVEL6
		elseif currFachoHealth >= 0 then
			curr_level = LEVEL7
		end
	end

	local function update_cartaz_state ()
		if currCartazHealth >= CARTAZ1_LIMIT then
			msg.post("Frame#placar", "play_animation", {id = hash("placar1")})
		elseif currCartazHealth >= CARTAZ2_LIMIT then
			msg.post("Frame#placar", "play_animation", {id = hash("placar2")})
		elseif currCartazHealth >= CARTAZ3_LIMIT then
			msg.post("Frame#placar", "play_animation", {id = hash("placar3")})
		elseif currCartazHealth >= CARTAZ4_LIMIT then
			msg.post("Frame#placar", "play_animation", {id = hash("placar4")})
		elseif currCartazHealth >= CARTAZ5_LIMIT then
			msg.post("Frame#placar", "play_animation", {id = hash("placar5")})
		elseif currCartazHealth > 0 then
			msg.post("Frame#placar", "play_animation", {id = hash("placar6")})
		elseif currCartazHealth <= 0 then
			msg.post("Frame#placar", "play_animation", {id = hash("placar7")})
			if cartaz_was_not_thrown then
				cartaz_was_not_thrown = false
				timer.delay(1, false, throw_cartaz_away)
			end
		end
	end

	if start == false then
		return
	end

	check_game_level_and_round ()

	if round == ROUND2 then
		set_cartaz_state()
	end
	
	if curr_level == PREPARE_ROUND then
		prepare_round()
		curr_level = WAIT_PREPARE_ROUND
		return
	elseif curr_level == WAIT_PREPARE_ROUND then
		return
	elseif curr_level == PREPARE_EVENT then
		prepare_event()
		curr_level = WAIT_PREPARE_EVENT
	elseif curr_level == WAIT_PREPARE_EVENT then
		return
	elseif curr_level == INTERACTIVE_EVENT then
		return
	elseif curr_level == LEVEL0 or 
	curr_level == LEVEL1 or 
	curr_level == LEVEL2 or 
	curr_level == LEVEL3 or
	curr_level == LEVEL4 or
	curr_level == LEVEL5 or
	curr_level == LEVEL6 or
	curr_level == LEVEL7 then
		if curr_round == ROUND1 then
			update_chico_state()
		elseif curr_round == ROUND2 then
			update_cartaz_state()
			update_melo_state()
		end
	elseif curr_level == FINAL_RESULT then 
		if game_won == false then
			player_loses()	
		end
		-- comunicate_score(game_won, numHits)
		curr_level = GAME_END
	elseif GAME_END then
		return
	end

	if continuous_hits > 5 and curr_level ~= FINISHING_LEVEL and dificulty == "hard" then
		sound.play("FinishHim#combo", {delay = 0, gain = 3, pan = 0, speed = 1})
		num_combos = num_combos + 1
		total_time_left = total_time_left + 2
		continuous_hits = 0
	end
end

function lose_stamina(value)
	-- The player will lose stamina
	currPlayerStamina = currPlayerStamina - value
	local stamina_lose_to_report = value
	if currPlayerStamina < 0 then
		stamina_lose_to_report = currPlayerStamina + value
		currPlayerStamina = 0			
	end

	msg.post(status_bar_id, "hurt_player", {stamina_lose_to_report})
end

function check_chico_hit(side, rotation)
	if side == "left" then
		if rotation > 2.3 and rotation < 6.5 then
			wasHit = true
		else
			lose_stamina(stamina_lose_value)
		end
	elseif side == "right" then
		if rotation < -2.5 and rotation > -10 then
			wasHit = true
		else
			lose_stamina(stamina_lose_value)
		end
	end
end

function check_melo_hit(side, rotation)
	if side == "left" then
		if rotation > 195 or currCartazHealth <= 0 then
			wasHit = true

			if curr_level < LEVEL7 then
				-- play and show hair being cut
				particlefx.play("flyingHair#haircut_left")
				sound.play("polvo_esquerdo#cut_sound", {delay = 0, gain = 2, pan = -1, speed = 1})
			end
			
			if curr_level >= LEVEL4 then
				particlefx.play("Cara#blood_splash_left")
				sound.play("Chico#slashed", {delay = 0, gain = 2, pan = -1, speed = 1})
			end
		else
			cartaz_was_hit = true
			lose_stamina(stamina_lose_value)
		end
	elseif side == "right" then
		if rotation < 167 or currCartazHealth <= 0 then
			wasHit = true

			if curr_level < LEVEL7 then
				-- play and show hair being cut
				particlefx.play("flyingHair#haircut_right")
				sound.play("polvo_direito#cut_sound", {delay = 0, gain = 2, pan = 1, speed = 1})
			end
			
			if curr_level >= LEVEL6 then
				particlefx.play("Cara#blood_splash_right")
				sound.play("Chico#slashed", {delay = 0, gain = 2, pan = 1, speed = 1})
			end
		else
			cartaz_was_hit = true
			lose_stamina(stamina_lose_value)
		end
	end
end

function check_hit(side, rotation)
	if curr_round == ROUND1 then
		check_chico_hit(side, rotation)
	elseif curr_round == ROUND2 then
		check_melo_hit(side, rotation)
	end
end

local function squids_back_to_idle(side)
	if side == "left" then
		spine.play_anim("polvo_esquerdo#spinemodel", "Idle_left", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
	else
		spine.play_anim("polvo_direito#spinemodel", "Idle_Right", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
	end
end

local block_left = false
local block_right = false
local function cut_left()
	-- animate cut left
	block_right = true
	sound.play("polvo_esquerdo#attack_sound", {delay = 0, gain = 2, pan = -1, speed = 1})
	spine.play_anim("polvo_esquerdo#spinemodel", "Attack", go.PLAYBACK_ONCE_FORWARD, {playback_rate = 2.5}, function()
		block_right = false
		squids_back_to_idle("left")
	end)
	
	-- label.set_text("Cenario#Pontos", string.format("%d", numHits))
end

local function cut_right()
	-- Animate cut right
	block_left = true
	sound.play("polvo_direito#attack_sound", {delay = 0, gain = 2, pan = 1, speed = 1.2})
	spine.play_anim("polvo_direito#spinemodel", "Atack", go.PLAYBACK_ONCE_FORWARD, {playback_rate = 2}, function()
		block_left = false
		squids_back_to_idle("right")
	end)

	-- label.set_text("Cenario#Pontos", string.format("%d", numHits))
end

function on_message(self, message_id, message, sender)
	if message_id == hash("dificulty") then
		dificulty = message[1]
	elseif message_id == hash("start") then
		start = true
	elseif message_id == hash("start_round") then
		start_round()
	elseif message_id == hash("time_over") then
		curr_level = FINAL_RESULT
	elseif message_id == hash("spine_event") then
		if message.event_id == hash("attack_left") then
			local rot_position = 0
			block_right = false
			if curr_round == ROUND1 then 
				rot_position = get_object_rotation("Chico")
			elseif curr_round == ROUND2 then
				rot_position = get_object_rotation("Cartaz")
			end
			check_hit("left", rot_position)
		elseif message.event_id == hash("attack_right") then
			local rot_position = 0
			block_left = false
			if curr_round == ROUND1 then 
				rot_position = get_object_rotation("Chico")
			elseif curr_round == ROUND2 then
				rot_position = get_object_rotation("Cartaz")
			end
			check_hit("right", rot_position)
		end
	end
end

local TORA_FIRST_TRY = 1
local TORA_SECOND_TRY = 2
local curr_tora_iteration = TORA_FIRST_TRY
local tora_wait_iteration = false
function perform_tora_action()
	if tora_wait_iteration then
		return
	else
		tora_wait_iteration = true
		
	end
end

function turn_on_beam_of_light()
	sound.play("Beam#sound")
	set_beam("enable")
	particlefx.play("Beam#thoughts")
end

function turn_off_beam_of_light()
	sound.stop("Beam#sound")
	set_beam("disable")
	particlefx.stop("Beam#thoughts")
end

function turn_melo_in_deity_mode()
	set_god_eyes("enable")
	turn_on_beam_of_light()
end

local OCTOPUS_FIRST_DRILL = 1
local OCTOPUS_SECOND_DRILL = 2
local OCTOPUS_LAST_DRILL = 3
local curr_octopus_iteration = OCTOPUS_FIRST_DRILL
local octopus_wait_iteration = false
local DRILL_ACTION_TIME = 5
function perform_octopus_action()
	if octopus_wait_iteration then
		return
	else
		octopus_wait_iteration = true
		if curr_octopus_iteration == OCTOPUS_FIRST_DRILL then
			-- Animate drill until surface (84y)
			go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 79, go.EASING_LINEAR, 3, 0, function()
				-- sparkles start flying
				particlefx.play("Sparkles")
				-- small hole starts showing after 1 sec of drilling
				timer.delay(1, false, function()
					-- Start showing hole in the head
					set_hole("enable")
					-- After 4 seconds animate hole getting bigger and drill getting deeper (duration 10 secs)
					timer.delay(4, false, function()
						-- drill noise get's higher
						sound.play("Drill#hammer_drill")
						-- Olhos do melo trepidam
						mexe_olhos_melo(OLHOS_TREMEM, 0.04)
						go.animate("Buraco", "scale.x", go.PLAYBACK_ONCE_FORWARD, .8, go.EASING_LINEAR, DRILL_ACTION_TIME, 0)
						go.animate("Buraco", "scale.y", go.PLAYBACK_ONCE_FORWARD, .5, go.EASING_LINEAR, DRILL_ACTION_TIME, 0)
						go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 78, go.EASING_LINEAR, DRILL_ACTION_TIME, 0, function()
							-- drill returns back to same position and noise goes to idle
							sound.stop("Drill#hammer_drill")
							-- stop sparkles
							particlefx.stop("Sparkles")
							-- Olhos do melho param de tremer
							param_olhos_melo()
							go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 110, go.EASING_LINEAR, DRILL_ACTION_TIME, 0, function()
								-- increase iteration
								curr_octopus_iteration = OCTOPUS_SECOND_DRILL
								-- octopus_wait_iteration = false
								octopus_wait_iteration = false
							end)
						end)
					end)
				end)
			end)
		elseif curr_octopus_iteration == OCTOPUS_SECOND_DRILL then
			-- Animate drill until last place it drilled
			go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 72, go.EASING_LINEAR, 3, 0, function()
				-- Grow hole to size of drill while drill goes further
				-- Sparkles and bone start comming out
				particlefx.play("Sparkles")
				particlefx.play("Bones")
				-- drill noise get's higher
				sound.play("Drill#hammer_drill")
				-- Olhos do melo trepidam
				mexe_olhos_melo(OLHOS_TREMEM, 0.04)
				go.animate("Buraco", "scale.x", go.PLAYBACK_ONCE_FORWARD, 1.2, go.EASING_LINEAR, DRILL_ACTION_TIME, 0)
				go.animate("Buraco", "scale.y", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, DRILL_ACTION_TIME, 0)
				-- Drill deeper
				go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 62, go.EASING_LINEAR, DRILL_ACTION_TIME, 0, function()
					-- drill returns back to same position and noise goes to idle
					sound.stop("Drill#hammer_drill")
					-- stop sparkles and bone
					particlefx.stop("Sparkles")
					particlefx.stop("Bones")
					-- Olhos do melho param de tremer
					param_olhos_melo()
					go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 100, go.EASING_LINEAR, DRILL_ACTION_TIME, 0, function()
						-- increase iteration
						curr_octopus_iteration = OCTOPUS_LAST_DRILL
						-- octopus_wait_iteration = false
						octopus_wait_iteration = false
					end)
				end)
			end)
		elseif curr_octopus_iteration == OCTOPUS_LAST_DRILL then
			-- Change melo head to have a mouth that opens
			change_melo_face(MELO_NO_HAIR_NO_MOUTH)
			set_mouth("enable")
			-- Animate drill until top of head
			go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 65, go.EASING_LINEAR, 3, 0, function()
				-- Start full drilling
				-- Start squirting blood
				particlefx.play("BloodHole")
				particlefx.play("Bones")
				-- Slowly open Melo mouth while drilling and pull his eyes up
				mexe_olhos_melo(OLHOS_CIMA, 10, function() end)
				go.animate("Mouth", "position.y", go.PLAYBACK_ONCE_FORWARD, -225, go.EASING_LINEAR, 10)
				-- Drill deeper
				go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 45, go.EASING_LINEAR, DRILL_ACTION_TIME, 0, function()
					-- Stay there drilling for more 5 seconds
					timer.delay(5, false, function()
						-- drill returns back to same position and noise goes to idle
						-- Stop particles
						particlefx.play("BloodHole")
						particlefx.stop("Bones")
						-- Change outside of hole to be bloody
						msg.post("Hole_Top#sprite", "play_animation", {id = hash("Hole_Big_Top")})
						go.animate("FullDrill", "position.y", go.PLAYBACK_ONCE_FORWARD, 110, go.EASING_LINEAR, DRILL_ACTION_TIME, 0, function()
							-- Stop drill and its idle sound
							sound.stop("Drill#idle_drill")
							msg.post("Drill#sprite", "play_animation", {id = hash("drill10")})
							
							-- Cover drill again and go away
							sound.play("DrillTip#sound")
							go.animate("DrillTip", "euler.z", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 3, 0, function()
								-- Remove drill from scene
								move_octopus_away(function()
									-- Slowly close the mouth and turn into deity
									go.animate("Mouth", "position.y", go.PLAYBACK_ONCE_FORWARD, -175, go.EASING_LINEAR, 3, 0, function()
										-- A beam of light starts coming out of the hole and small while stuff
										turn_melo_in_deity_mode()
										rest_attackers()
										-- Go to next EVENT
										curr_level = PREPARE_EVENT
										curr_event = EVENT_TORA
									end)
								end)
							end)
						end)
					end)
				end)
			end)
		end
	end
end

function on_input(self, action_id, action)
	if start == false then
		return
	end

	if is_non_input_level() then
		-- Do nothing on input for these states, ignore
		return
	elseif curr_level == INTERACTIVE_EVENT then
		if (action_id == hash("click") or 
		action_id == hash("click_left") or 
		action_id == hash("click_right")) and action.pressed then
			if curr_event == EVENT_OCTOPUS then
				perform_octopus_action()
			elseif curr_event == EVENT_TORA then
				perform_tora_action()
			else
				-- Do nothing
				return
			end
		end
	elseif curr_level == GAME_END then
		if action_id == hash("click") and action.pressed then
			clicks_to_finish = clicks_to_finish - 1
			if clicks_to_finish == 0 then
				msg.post("main:/controler#controler", "show_menu")
			end
		end
		return 
	else
		if currPlayerStamina <= 0 then
			-- Warn player and return
			sound.stop("Cenario#no_stamina")
			sound.play("Cenario#no_stamina", {delay = 0, gain = 1, pan = 1, speed = 1.1})
			return
		end
		if block_left and block_right then
			-- If Something was not unblocked properly unblock both
			block_left = false
			block_right = false
		end
		if action_id == hash("click") and action.pressed then
			if nextCut == "Left" then
				cut_left()			
				nextCut = "Right"
			elseif nextCut == "Right" then
				cut_right()
				nextCut = "Left"
			end
		elseif action_id == hash("click_left") and action.pressed then
			if block_left then return end
			cut_left()
		elseif action_id == hash("click_right") and action.pressed then
			if block_right then return end
			cut_right()
		end
	end
end