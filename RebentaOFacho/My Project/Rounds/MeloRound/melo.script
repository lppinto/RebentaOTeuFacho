local nextCut = nil
local numHits = nil
local finish_hits = 1
local numFails = 0
local wasHit = false
local continuous_hits = 0
local computed_points = false
local num_combos = 0
local game_won = false
local start = false
local dificulty = "hard"
local clicks_to_finish = 5
local total_time_left = 45
local hit_value = 3
local stamina_lose_value = 5
local stamina_recover_value = 10

-- Heath and Stamina
local maxFachoHealth = 100
local currFachoHealth = maxFachoHealth
local maxPlayerStamina = 100
local currPlayerStamina = maxPlayerStamina

-- Shortcuts
local status_bar_id = "melo:/Score/GameStatus#ScoreAndStats"

-- Round levels
local ROUND1 = 1
local ROUND2 = 2
local curr_round = ROUND1

-- Event levels
local EVENT1 = 1
local EVENT2 = 2
local EVENT3 = 3
local curr_event = EVENT1

-- Damage levels / game states
local PREPARE_ROUND = 0
local WAIT_PREPARE_ROUND = 1
local LEVEL0 = 2
local LEVEL1 = 3
local LEVEL2 = 4
local LEVEL3 = 5
local LEVEL4 = 6
local LEVEL5 = 7
local LEVEL6 = 8
local LEVEL7 = 9
local LEVEL8 = 10
local FINISHING_LEVEL = 11
local FINISH_HIM = 12
local FINAL_RESULT = 13
local GAME_END = 14
local PREPARE_EVENT = 15
local WAIT_PREPARE_EVENT = 16
local curr_level = PREPARE_ROUND
local number_of_levels = 8 -- Not counting the 0

-- To compute levels
local max_hits_to_take = maxFachoHealth / hit_value
local hits_per_level = max_hits_to_take / number_of_levels

-- Initial object positions
local melo_inner_init_pos = nil
local melo_inner_init_scale = nil

-- Utility functions to be gatheres in a common script
local function animate_object(id, properties, playback, tos, easing, duration)
	for index, property in ipairs(properties) do
		go.animate(id, property, playback, tos[index], easing, duration, 0)
	end
end

local function combo_off(self, handle, elapsed)
	continuous_hits = 0
end

function init(self)
	msg.post(".", "acquire_input_focus")
	
	nextCut = "Left"
	numHits = 0
	numFails = 0
	wasHit = false
	continuous_hits = 0
	computed_points = false
	num_combos = 0

	-- Save initial positions
	melo_inner_init_pos = go.get_position("Melo")
	melo_inner_init_scale = go.get_scale("Melo")
	
	-- TODO
	start = true
end

function laugh_stop(self, handle, elapsed)

end

function player_loses()		

end

function set_ferida(number, state)
	local ferida_id = string.format("Feridas#ferida%d", number)
	msg.post(ferida_id, state)
end

function animate_chico_hit()
	msg.post("ChicoHead#sprite", "play_animation", {id = hash("hit")})
	go.animate("ChicoHead", "scale.x", go.PLAYBACK_ONCE_BACKWARD, 0.27, go.EASING_OUTELASTIC, 0.2)
	go.animate("ChicoHead", "scale.y", go.PLAYBACK_ONCE_BACKWARD, 0.27, go.EASING_OUTELASTIC, 0.2)
end

function animate_chico_dead()
	msg.post("ChicoHead#sprite", "play_animation", {id = hash("chico_morto")})
	msg.post("BloodMask#sprite", "enable")

	-- Stop all chico animations
	go.cancel_animations("Chico", "euler.z")
end

function change_chico_state()
	-- Delete all the stuff not needed for chico right now
	if curr_level < LEVEL0 then
		-- Set normal first face
		msg.post("ChicoHead#sprite", "play_animation", {id = hash("chico_preocupado")})
		-- No wounds visible
		for i = 1,6 do
			set_ferida(i, "disable")
		end
		-- No blood mask visible
		msg.post("BloodMask#sprite", "disable")
	elseif curr_level <= LEVEL8 then
		-- We only have wounds until level 6
		if curr_level > LEVEL0 and curr_level <= LEVEL6 then
			local ferida_id = curr_level - 2
			set_ferida(ferida_id, "enable")
		end
		if wasHit then
			ai_number = math.random(1,4)
			ai_id = string.format("Chico#ai%d", ai_number)

			animate_chico_hit()
			
			sound.play(ai_id, {delay = 0, gain = 3, pan = -1, speed = 1})

			currFachoHealth = currFachoHealth - hit_value
			local hit_value_to_report = hit_value
			if currFachoHealth < 0 then
				hit_value_to_report = currFachoHealth + hit_value
				currFachoHealth = 0

				animate_chico_dead()
				
				-- Let's prepare for Melo's Round!
				curr_round = ROUND2
				curr_level = PREPARE_ROUND

				msg.post(status_bar_id, "pause")				
			end
			
			msg.post(status_bar_id, "hurt_facho", {hit_value_to_report})
			
			wasHit = false
		end
	end
end

function set_hole (state)
	msg.post("Hole_Back#sprite", state)
	msg.post("Hole_Top#sprite", state)
	msg.post("Top_To_Hide_Drill#sprite", state) 
end

function set_beam (state)
	msg.post("Beam#sprite", state)
end 

function set_raios (state)
	msg.post("Raios#sprite", state)
end

local OLHOS_DIR = 0
local OLHOS_ESQ = 1
local OLHOS_CIMA = 2
local OLHOS_BAIXO = 3
local OLHOS_TROCADOS = 4
local OLHOS_TREMEM = 5
local OLHOS_CENTRO = 6
function mexe_olhos_melo (dir, duration, callback)
	if dir == OLHOS_DIR then
		go.animate("olhos", "position.x", go.PLAYBACK_ONCE_FORWARD, 16, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_ESQ then
		go.animate("olhos", "position.x", go.PLAYBACK_ONCE_FORWARD, -17, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_CIMA then
		go.animate("olhos", "position.y", go.PLAYBACK_ONCE_FORWARD, 26, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_BAIXO then
		go.animate("olhos", "position.y", go.PLAYBACK_ONCE_FORWARD, -14, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_TROCADOS then
		go.animate("olho_direito", "position.x", go.PLAYBACK_ONCE_FORWARD, -20, go.EASING_LINEAR, duration)
		go.animate("olho_esquerdo", "position.x", go.PLAYBACK_ONCE_FORWARD, 20, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_TREMEM then
		go.animate("olhos", "position.y", go.PLAYBACK_LOOP_PINGPONG, 15, go.EASING_OUTBOUNCE, 0.1)
	elseif dir == OLHOS_CENTRO then
		go.animate("olho_direito", "position.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, duration)
		go.animate("olho_esquerdo", "position.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, duration)
		go.animate("olhos", "position.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, duration)
		go.animate("olhos", "position.y", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, duration, 0, callback)
	end
end

local MELO_HAPPY_FACE = "Cabeça1"
local MELO_NORMAL_FACE = "Cabeça2"
local MELO_NORMAL_FACE_MAD = "Cabeça2_mad"
local NELO_NORMAL_FACE_AFRAID = "Cabeça2_afraid"
local MELO_LESS_HAIR_FACE = "Cabeça3"
local MELO_LESS_HAIR_FACE_AFRAID = "Cabeça3_afraid"
local MELO_NO_HAIR_FACE = "Cabeça4"
local MELO_NO_HAIR_OLD1 = "Cabeça5"
local MELO_NO_HAIR_OLD2 = "Cabeça6"
local MELO_NO_HAIR_OLD3 = "Cabeça7"
function change_melo_face(type)
	msg.post("Cara#sprite", "play_animation", {id = hash(type)})
end
	
function change_melo_state(wasHit)
	if curr_round == 1 then
		-- hide all the stuff not needed for melo right now
		set_hole("disable")
		set_beam("disable")
		set_raios("disable")
		change_melo_face(MELO_HAPPY_FACE)
	elseif curr_round == 2 then
	end
end

function raise_melo_hand_wave(next_callback)
	local curr_hand_pos = go.get_position("wavingHand")
	go.animate("wavingHand", "position.y", go.PLAYBACK_ONCE_FORWARD, -164, go.EASING_LINEAR, 2, 0, function()
		timer.delay(1, false, function ()
			go.animate("wavingHand", "rotation.z", go.PLAYBACK_LOOP_PINGPONG, -.2, go.EASING_LINEAR, 2)
			timer.delay(4, false, function ()
				print "Stoping waving"
				go.cancel_animations("wavingHand", "rotation.z")
				go.animate("wavingHand", "position.y", go.PLAYBACK_ONCE_FORWARD, curr_hand_pos.y, go.EASING_LINEAR, 2, 0, next_callback)
			end)
		end)
	end)
end

function raise_attackers (next_callback)
	-- Raise squids
	go.animate("polvo_esquerdo", "position.y", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 2)
	go.animate("polvo_direito", "position.y", go.PLAYBACK_ONCE_FORWARD, 2, go.EASING_LINEAR, 2)
	
	local function idle_tentacles()
		spine.play_anim("polvo_esquerdo#spinemodel", "Idle_left", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
		spine.play_anim("polvo_direito#spinemodel", "Idle_Right", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
	end

	local function raise_tentacles()
		spine.play_anim("polvo_esquerdo#spinemodel", "Rise_Left", go.PLAYBACK_ONCE_FORWARD, {playback_rate = .5})
		spine.play_anim("polvo_direito#spinemodel", "Rise_Right", go.PLAYBACK_ONCE_FORWARD, {playback_rate = .5}, idle_tentacles)
	end
	
	-- Wait 5 seconds to raise the tentacles
	timer.delay(2, false, raise_tentacles)
	timer.delay(4, false, next_callback)
end

function foreshadow_attack(next_callback)
	-- People stop clapping
	sound.stop("Melo#palmas");
	timer.delay(1, false, function()
		change_melo_face(MELO_NORMAL_FACE)
	end)
	
	timer.delay(1, false, function()
		sound.play("Cenario#crowd_afraid")
	end)
	
	timer.delay(1, false, function()
		raise_attackers(next_callback)
	end)
end

function melo_looks_around (speed, next_callback)
	mexe_olhos_melo(OLHOS_DIR, speed, function()
		mexe_olhos_melo(OLHOS_ESQ, speed, function()
			mexe_olhos_melo(OLHOS_CENTRO, speed, next_callback)
		end)
	end)
end

function raise_chico(next_callback)
	go.animate("Melo", "position.y", go.PLAYBACK_ONCE_FORWARD, melo_inner_init_pos.y - 60, go.EASING_LINEAR, 2)
	go.animate("Melo", "scale.x", go.PLAYBACK_ONCE_FORWARD, 0.9, go.EASING_LINEAR, 2)
	go.animate("Melo", "scale.y", go.PLAYBACK_ONCE_FORWARD, 0.9, go.EASING_LINEAR, 2)
	go.animate("Chico", "position.y", go.PLAYBACK_ONCE_FORWARD, -450, go.EASING_LINEAR, 1, 0, next_callback)
end

local chico_rotation_euler = 20
function start_moving_chico()
	chico_rotation_euler = -chico_rotation_euler
	go.animate("Chico", "euler.z", go.PLAYBACK_ONCE_FORWARD, chico_rotation_euler, go.EASING_LINEAR, 1, 0, start_moving_chico)
end

-- This is where the party starts
function start_round()
	if curr_round == ROUND1 then	
		curr_level = LEVEL0
		start_moving_chico()

		-- Increase player stamina each 5 secods until max is reached
		timer.delay(5, true, function()
			if currPlayerStamina < 100 then
				currPlayerStamina = currPlayerStamina + stamina_recover_value -- 10% increase
				local stamina_to_give = stamina_recover_value
				if currPlayerStamina > 100 then 
					stamina_to_give = stamina_recover_value - currPlayerStamina - maxPlayerStamina
					currPlayerStamina = 100 -- Don't overflow
				end

				-- Comunicate to the status status_bar_id
				msg.post(status_bar_id, "give_player", {stamina_to_give})
			end
		end)
	end
end

function prepare_round()
	
	local function round1 (next_callback)
		change_melo_state()
		change_chico_state()

		-- People start clapping
		sound.play("Melo#palmas");
		
		-- One second later melo raises hand and waves
		timer.delay(1, false, function()
			raise_melo_hand_wave(function()
				melo_looks_around(1, function()
					foreshadow_attack(function()
						melo_looks_around(0.5, function()
							raise_chico(function()
								msg.post(status_bar_id, "prepare", {total_time_left,2,200,100, true, "Dr. Chiquinho"})

								-- Wait for the prepare
								timer.delay(1, false, function()
									msg.post(status_bar_id, "start")
								end)
							end)
						end)
					end)
				end)
			end)
		end)
	end

	local function round2 ()
		print("Let's go for Round2")
	end

	if curr_round == ROUND1 then
		round1()
	elseif curr_round == ROUND2 then
		round2()
	end
end

function update(self, dt)

	local function check_game_level_and_round()

		if curr_level == PREPARE_ROUND or
		curr_level == WAIT_PREPARE_ROUND then
			return
		end
		
		if currFachoHealth > maxFachoHealth - hits_per_level * LEVEL0 then
			curr_level = LEVEL0
		elseif currFachoHealth > maxFachoHealth - hits_per_level * LEVEL1 then
			curr_level = LEVEL1
		elseif currFachoHealth > maxFachoHealth - hits_per_level * LEVEL2 then
			curr_level = LEVEL2
		elseif currFachoHealth > maxFachoHealth - hits_per_level * LEVEL3 then
			curr_level = LEVEL3
		elseif currFachoHealth > maxFachoHealth - hits_per_level * LEVEL4 then
			curr_level = LEVEL4
		elseif currFachoHealth > maxFachoHealth - hits_per_level * LEVEL5 then
			curr_level = LEVEL5
		elseif currFachoHealth > maxFachoHealth - hits_per_level * LEVEL6 then
			curr_level = LEVEL6
		elseif currFachoHealth > maxFachoHealth - hits_per_level * LEVEL7 then
			curr_level = LEVEL7
		elseif currFachoHealth > maxFachoHealth - hits_per_level * LEVEL8 then
			curr_level = LEVEL8
		end
	end

	if start == false then
		return
	end

	check_game_level_and_round ()

	if curr_level == PREPARE_ROUND then
		prepare_round()
		curr_level = WAIT_PREPARE_ROUND
		return
	elseif curr_level == WAIT_PREPARE_ROUND then
		return
	elseif curr_level == LEVEL0 or 
	curr_level == LEVEL1 or 
	curr_level == LEVEL2 or 
	curr_level == LEVEL3 or
	curr_level == LEVEL4 or
	curr_level == LEVEL5 or
	curr_level == LEVEL6 or
	curr_level == LEVEL7 or
	curr_level == LEVEL8 then
		
		-- change_melo_state()
		change_chico_state()
	elseif curr_level == PREPARE_FINISH then
		msg.post(status_bar_id, "pause")
		timer.delay(0.5, false, prepare_finish)
		curr_level = WAIT_PREPARE_FINISH
	elseif curr_level == WAIT_PREPARE_FINISH then
		return 
	elseif curr_level == FINISHING_LEVEL then
		-- Raise the mega drill and position it
		return
	elseif curr_level == FINISH_HIM then
		finish_him ()
	elseif curr_level == FINAL_RESULT then 
		if game_won == false then
			player_loses()	
		end
		comunicate_score(game_won, numHits)
		curr_level = GAME_END
	elseif GAME_END then
		return
	end

	if continuous_hits > 5 and curr_level ~= FINISHING_LEVEL and dificulty == "hard" then
		sound.play("FinishHim#combo", {delay = 0, gain = 3, pan = 0, speed = 1})
		num_combos = num_combos + 1
		total_time_left = total_time_left + 2
		continuous_hits = 0
	end
end

function lose_stamina()
	-- The player will lose stamina
	currPlayerStamina = currPlayerStamina - stamina_lose_value
	local stamina_lose_to_report = stamina_lose_value
	if currPlayerStamina < 0 then
		stamina_lose_to_report = currPlayerStamina + stamina_lose_value
		currPlayerStamina = 0			
	end

	msg.post(status_bar_id, "hurt_player", {stamina_lose_to_report})
end

function check_chico_hit(side, rotation)
	victim_rot = math.deg(rotation.z)
	if side == "left" then
		if victim_rot > 1.3 and victim_rot < 6 then
			print "Victim was hit on the left"
			wasHit = true
		else
			lose_stamina()
		end
	elseif side == "right" then
		if victim_rot < 0.1 and victim_rot > -3.8 then
			print "Victim was hit on the right"
			wasHit = true
		else
			lose_stamina()
		end
	end
end

function check_melo_hit(side, rotation)
	-- victim_rot = math.deg(rotation.z)
	-- ai_number = math.random(1,4)
	-- ai_id = string.format("", ...)
	-- if side == "left" then
	-- 	if victim_rot > 1.5 and victim_rot < 5.5 then
	-- 		print "Victim was hit on the left"
	-- 		sound.play("polvo_esquerdo#cut_sound", {delay = 0, gain = 5, pan = -1, speed = 1})
	-- 		wasHit = true
	-- 		msg.post(status_bar_id, "hurt_facho", {1})
	-- 	else
	-- 		-- The player will lose stamina
	-- 		msg.post(status_bar_id, "hurt_player", {1})
	-- 	end
	-- elseif side == "right" then
	-- 	if victim_rot < 0.2 and victim_rot > -3.6 then
	-- 		print "Victim was hit on the right"
	-- 		sound.play("polvo_direito#cut_sound", {delay = 0, gain = 5, pan = 1, speed = 1.2})
	-- 		wasHit = true
	-- 		msg.post(status_bar_id, "hurt_facho", {1})
	-- 	else
	-- 		-- The player will lose stamina
	-- 		msg.post(status_bar_id, "hurt_player", {1})
	-- 	end
	-- end
end

function check_hit(side, rotation)
	if curr_round == ROUND1 then
		check_chico_hit(side, rotation)
	elseif curr_round == ROUND2 then
		-- Time to take care of Melocolico
	end
end

local function back_to_idle(side)
	if side == "left" then
		spine.play_anim("polvo_esquerdo#spinemodel", "Idle_left", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
	else
		spine.play_anim("polvo_direito#spinemodel", "Idle_Right", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
	end
end

local block_left = false
local block_right = false
local function cut_left()
	-- animate cut left
	block_right = true
	sound.play("polvo_esquerdo#attack_sound", {delay = 0, gain = 2, pan = -1, speed = 1})
	spine.play_anim("polvo_esquerdo#spinemodel", "Attack", go.PLAYBACK_ONCE_FORWARD, {playback_rate = 2.5}, function()
		block_right = false
		back_to_idle("left")
	end)
	
	-- label.set_text("Cenario#Pontos", string.format("%d", numHits))
end

local function cut_right()
	-- Animate cut right
	block_left = true
	sound.play("polvo_direito#attack_sound", {delay = 0, gain = 2, pan = 1, speed = 1.2})
	spine.play_anim("polvo_direito#spinemodel", "Atack", go.PLAYBACK_ONCE_FORWARD, {playback_rate = 2}, function()
		block_left = false
		back_to_idle("right")
	end)

	-- label.set_text("Cenario#Pontos", string.format("%d", numHits))
end

function get_chico_rotation ()
	return go.get_world_rotation("Chico")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("dificulty") then
		dificulty = message[1]
	elseif message_id == hash("start") then
		start = true
	elseif message_id == hash("start_round") then
		start_round()
	elseif message_id == hash("time_over") then
		curr_level = FINAL_RESULT
	elseif message_id == hash("spine_event") then
		local head_rot_pos = 0
		if message.event_id == hash("attack_left") then
			block_right = false
			if curr_round == 1 then head_rot_pos = get_chico_rotation() end
			check_hit("left", head_rot_pos)
		elseif message.event_id == hash("attack_right") then
			block_left = false
			if curr_round == 1 then head_rot_pos = get_chico_rotation() end
			check_hit("right", head_rot_pos)
		end
	end
end

function on_input(self, action_id, action)
	if start == false then
		return
	end

	if curr_level == PREPARE_ROUND or
	curr_level == WAIT_PREPARE_ROUND or
	curr_level == PREPARE_FINISH or 
	curr_level == WAIT_PREPARE_FINISH or 
	curr_level == FINISH_HIM or
	curr_level == PREPARE_EVENT or
	curr_level == WAIT_PREPARE_EVENT or
	curr_level == FINAL_RESULT then
		-- Do nothing on input for these states, ignore
		return
	elseif curr_level == GAME_END then
		if action_id == hash("click") and action.pressed then
			clicks_to_finish = clicks_to_finish - 1
			if clicks_to_finish == 0 then
				msg.post("main:/controler#controler", "show_menu")
			end
		end
		return 
	else
		if currPlayerStamina <= 0 then
			-- Warn player and return
			sound.stop("Cenario#no_stamina")
			sound.play("Cenario#no_stamina", {delay = 0, gain = 1, pan = 1, speed = 1.1})
			return
		end
		if block_left and block_right then
			-- Something was not unblocked properly
			-- unblock both
			block_left = false
			block_right = false
		end
		if action_id == hash("click") and action.pressed then
			if nextCut == "Left" then
				cut_left()			
				nextCut = "Right"
			elseif nextCut == "Right" then
				cut_right()
				nextCut = "Left"
			end
		elseif action_id == hash("click_left") and action.pressed then
			if block_left then return end
			cut_left()
		elseif action_id == hash("click_right") and action.pressed then
			if block_right then return end
			cut_right()
		end
	end
end