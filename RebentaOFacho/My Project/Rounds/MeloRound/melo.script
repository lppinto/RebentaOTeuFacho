local nextCut = nil
local numHits = nil
local finish_hits = 1
local cut_hits = 1
local numFails = 0
local wasHit = false
local continuous_hits = 0
local game_timer = nil
local computed_points = false
local num_combos = 0
local game_won = false
local start = false
local dificulty = "hard"
local clicks_to_finish = 5
local total_time_left = nil
local status_bar_id = "melo:/Score/GameStatus#ScoreAndStats"

-- Round levels
local ROUND1 = 1
local ROUND2 = 2
local curr_round = ROUND1

-- Event levels
local EVENT1 = 1
local EVENT2 = 2
local EVENT3 = 3
local curr_event = EVENT1

-- Damage levels / game states
local PREPARE_ROUND = 0
local WAIT_PREPARE_ROUND = 1
local LEVEL0 = 2
local LEVEL1 = 3
local LEVEL2 = 4
local LEVEL3 = 5
local LEVEL4 = 6
local LEVEL5 = 7
local LEVEL6 = 8
local LEVEL7 = 9
local LEVEL8 = 10
local FINISHING_LEVEL = 11
local FINISH_HIM = 12
local FINAL_RESULT = 13
local GAME_END = 14
local PREPARE_EVENT = 15
local WAIT_PREPARE_EVENT = 16
local curr_level = PREPARE_ROUND

-- Head states
local HEAD_INIT = 1

-- Initial object positions
local melo_inner_init_pos = nil
local tentaculodireito_init_pos = nil
local tentaculoesquerdo_init_pos = nil

-- Utility functions to be gatheres in a common script
local function animate_object(id, properties, playback, tos, easing, duration)
	for index, property in ipairs(properties) do
		go.animate(id, property, playback, tos[index], easing, duration, 0)
	end
end

local function combo_off(self, handle, elapsed)
	continuous_hits = 0
end

function start_game()

end

function on_message(self, message_id, message, sender)
	if message_id == hash("dificulty") then
		dificulty = message[1]
	elseif message_id == hash("start") then
		return
	elseif message_id == hash("start_round") then
		start = true
	elseif message_id == hash("time_over") then
		curr_level = FINAL_RESULT
	end
end

-- Hide initial objects at the beginning of the level
function hide_initial_objects()
	spine.play_anim("polvo_esquerdo#spinemodel", "Dorment_Left", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = 5})
	spine.play_anim("polvo_direito#spinemodel", "Dorment_Right", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = 5})
end

function init(self)
	msg.post(".", "acquire_input_focus")
	
	nextCut = "Left"
	numHits = 0
	numFails = 0
	wasHit = false
	continuous_hits = 0
	computed_points = false
	num_combos = 0
	total_time_left = 100000

	-- Save initial positions
	melo_inner_init_pos = go.get_position("Melo")
	
	hide_initial_objects()

	start = true
end

function laugh_stop(self, handle, elapsed)

end

function player_loses()		

end

function set_ferida(number, state)
	local ferida_id = string.format("Feridas#ferida%d", number)
	msg.post(ferida_id, state)
end

function change_chico_state(wasHit)
	if curr_round == 1 then
		-- Delete all the stuff not needed for chico right now
		if curr_level <= LEVEL0 then
			-- No woumnds visible
			for i = 1,6 do
				set_ferida(i, "disable")
			end
		elseif curr_level <= LEVEL6 then
			local ferida_id = curr_level - 2
			set_ferida(ferida_id, "enable")
		end 
	elseif curr_round == 2 then
		-- We wont do nothing here as he will have disappeared by now
		return 
	end
end

function set_hole (state)
	msg.post("Hole_Back#sprite", state)
	msg.post("Hole_Top#sprite", state)
	msg.post("Top_To_Hide_Drill#sprite", state) 
end

function set_beam (state)
	msg.post("Beam#sprite", state)
end 

function set_raios (state)
	msg.post("Raios#sprite", state)
end

local OLHOS_DIR = 0
local OLHOS_ESQ = 1
local OLHOS_CIMA = 2
local OLHOS_BAIXO = 3
local OLHOS_TROCADOS = 4
local OLHOS_TREMEM = 5
local OLHOS_CENTRO = 6
function mexe_olhos_melo (dir, duration, callback)
	if dir == OLHOS_DIR then
		go.animate("olhos", "position.x", go.PLAYBACK_ONCE_FORWARD, 16, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_ESQ then
		go.animate("olhos", "position.x", go.PLAYBACK_ONCE_FORWARD, -17, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_CIMA then
		go.animate("olhos", "position.y", go.PLAYBACK_ONCE_FORWARD, 26, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_BAIXO then
		go.animate("olhos", "position.y", go.PLAYBACK_ONCE_FORWARD, -14, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_TROCADOS then
		go.animate("olho_direito", "position.x", go.PLAYBACK_ONCE_FORWARD, -20, go.EASING_LINEAR, duration)
		go.animate("olho_esquerdo", "position.x", go.PLAYBACK_ONCE_FORWARD, 20, go.EASING_LINEAR, duration, 0, callback)
	elseif dir == OLHOS_TREMEM then
		go.animate("olhos", "position.y", go.PLAYBACK_LOOP_PINGPONG, 15, go.EASING_OUTBOUNCE, 0.1)
	elseif dir == OLHOS_CENTRO then
		go.animate("olho_direito", "position.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, duration)
		go.animate("olho_esquerdo", "position.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, duration)
		go.animate("olhos", "position.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, duration)
		go.animate("olhos", "position.y", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, duration, 0, callback)
	end
end

local MELO_HAPPY_FACE = "Cabeça1"
local MELO_NORMAL_FACE = "Cabeça2"
local MELO_NORMAL_FACE_MAD = "Cabeça2_mad"
local NELO_NORMAL_FACE_AFRAID = "Cabeça2_afraid"
local MELO_LESS_HAIR_FACE = "Cabeça3"
local MELO_LESS_HAIR_FACE_AFRAID = "Cabeça3_afraid"
local MELO_NO_HAIR_FACE = "Cabeça4"
local MELO_NO_HAIR_OLD1 = "Cabeça5"
local MELO_NO_HAIR_OLD2 = "Cabeça6"
local MELO_NO_HAIR_OLD3 = "Cabeça7"
function change_melo_face(type)
	msg.post("Cara#sprite", "play_animation", {id = hash(type)})
end
	
function change_melo_state(wasHit)
	if curr_round == 1 then
		-- hide all the stuff not needed for melo right now
		set_hole("disable")
		set_beam("disable")
		set_raios("disable")
		change_melo_face(MELO_HAPPY_FACE)
	elseif curr_round == 2 then
	end
end

function raise_melo_hand_wave(next_callback)
	local curr_hand_pos = go.get_position("wavingHand")
	go.animate("wavingHand", "position.y", go.PLAYBACK_ONCE_FORWARD, -164, go.EASING_LINEAR, 2, 0, function()
		timer.delay(1, false, function ()
			go.animate("wavingHand", "rotation.z", go.PLAYBACK_LOOP_PINGPONG, -.2, go.EASING_LINEAR, 2)
			timer.delay(4, false, function ()
				print "Stoping waving"
				go.cancel_animations("wavingHand", "rotation.z")
				go.animate("wavingHand", "position.y", go.PLAYBACK_ONCE_FORWARD, curr_hand_pos.y, go.EASING_LINEAR, 2, 0, next_callback)
			end)
		end)
	end)
end


function raise_attackers (next_callback)
	-- Raise squids
	go.animate("polvo_esquerdo", "position.y", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 2)
	go.animate("polvo_direito", "position.y", go.PLAYBACK_ONCE_FORWARD, 2, go.EASING_LINEAR, 2)
	
	local function idle_tentacles()
		spine.play_anim("polvo_esquerdo#spinemodel", "Idle_left", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
		spine.play_anim("polvo_direito#spinemodel", "Idle_Right", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
	end

	local function raise_tentacles()
		spine.play_anim("polvo_esquerdo#spinemodel", "Rise_Left", go.PLAYBACK_ONCE_FORWARD, {playback_rate = .5})
		spine.play_anim("polvo_direito#spinemodel", "Rise_Right", go.PLAYBACK_ONCE_FORWARD, {playback_rate = .5}, idle_tentacles)
	end
	
	-- Wait 5 seconds to raise the tentacles
	timer.delay(4, false, raise_tentacles)
	timer.delay(2, false, next_callback)
end

function foreshadow_attack(next_callback)
	-- People stop clapping
	sound.stop("Melo#palmas");
	timer.delay(1, false, function()
		change_melo_face(MELO_NORMAL_FACE)
	end)
	
	timer.delay(1, false, function()
		sound.play("Cenario#crowd_afraid")
	end)
	
	timer.delay(1, false, function()
		raise_attackers(next_callback)
	end)
end

function melo_looks_around (speed, next_callback)
	mexe_olhos_melo(OLHOS_DIR, speed, function()
		mexe_olhos_melo(OLHOS_ESQ, speed, function()
			mexe_olhos_melo(OLHOS_CENTRO, speed, next_callback)
		end)
	end)
end

function raise_chico(next_callback)
	go.animate("Melo", "position.y", go.PLAYBACK_ONCE_FORWARD, melo_inner_init_pos.y - 40, go.EASING_LINEAR, 2)
	go.animate("Chico", "position.y", go.PLAYBACK_ONCE_FORWARD, -450, go.EASING_INBOUNCE, 1, 0, next_callback)
end

local chico_rotation = .07
function start_moving_chico()
	chico_rotation = -chico_rotation
	go.animate("Chico", "rotation.z", go.PLAYBACK_ONCE_FORWARD, chico_rotation, go.EASING_LINEAR, 1, 0, start_moving_chico)
	curr_level = LEVEL0
end

function prepare_round()

	local function round1 (next_callback)
		change_melo_state(false)
		change_chico_state(false)

		-- People start clapping
		sound.play("Melo#palmas");
		
		-- One second later melo raises hand and waves
		timer.delay(1, false, function()
			raise_melo_hand_wave(function()
				melo_looks_around(1, function()
					foreshadow_attack(function()
						melo_looks_around(0.5, function()
							raise_chico(function()
								msg.post(status_bar_id, "prepare", {30,2,200,100, true, "Dr. Meloncolico"})
								start_moving_chico()
							end)
						end)
					end)
				end)
			end)
		end)

	end

	local function round2 ()
	end

	if curr_round == 1 then
		round1()
	elseif curr_round == 2 then
		round2()
	end
end

function update(self, dt)

	local function check_game_level_and_round()
	end

	if start == false then
		return
	end

	check_game_level_and_round ()

	if curr_level == PREPARE_ROUND then
		prepare_round()
		curr_level = WAIT_PREPARE_ROUND
		return
	elseif curr_level == WAIT_PREPARE_ROUND then
		return
	elseif curr_level == LEVEL0 or 
	curr_level == LEVEL1 or 
	curr_level == LEVEL2 or 
	curr_level == LEVEL3 or
	curr_level == LEVEL4 or
	curr_level == LEVEL5 or
	curr_level == LEVEL6 or
	curr_level == LEVEL7 or
	curr_level == LEVEL8 then
		change_melo_state(wasHit)
		change_chico_state(wasHit)
	elseif curr_level == PREPARE_FINISH then
		msg.post(status_bar_id, "pause")
		timer.delay(0.5, false, prepare_finish)
		curr_level = WAIT_PREPARE_FINISH
	elseif curr_level == WAIT_PREPARE_FINISH then
		return 
	elseif curr_level == FINISHING_LEVEL then
		-- Raise the mega drill and position it
		return
	elseif curr_level == FINISH_HIM then
		finish_him ()
	elseif curr_level == FINAL_RESULT then 
		if game_won == false then
			player_loses()	
		end
		comunicate_score(game_won, numHits)
		curr_level = GAME_END
	elseif GAME_END then
		return
	end

	if continuous_hits > 5 and curr_level ~= FINISHING_LEVEL and dificulty == "hard" then
		sound.play("FinishHim#combo", {delay = 0, gain = 3, pan = 0, speed = 1})
		num_combos = num_combos + 1
		total_time_left = total_time_left + 2
		continuous_hits = 0
	end
end

local function check_hit(side)
	if side == "esquerdo" then
		sound.play("polvo_esquerdo#cut_sound", {delay = 0, gain = 5, pan = -1, speed = 1})
	elseif side == "direito" then
		sound.play("polvo_direito#cut_sound", {delay = 0, gain = 5, pan = 1, speed = 1.2})
	end

	msg.post(status_bar_id, "hurt_facho", {1})
end

local function back_to_idle(side)
	if side == "left" then
		spine.play_anim("polvo_esquerdo#spinemodel", "Idle_left", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
	else
		spine.play_anim("polvo_direito#spinemodel", "Idle_Right", go.PLAYBACK_LOOP_PINGPONG, {playback_rate = .5})
	end
end

local function cut_left()
	-- animate cut left
	sound.play("polvo_esquerdo#attack_sound", {delay = 0, gain = 2, pan = -1, speed = 1})
	spine.play_anim("polvo_esquerdo#spinemodel", "Attack", go.PLAYBACK_ONCE_FORWARD, {playback_rate = 2}, function()
		back_to_idle("left")
	end)

	check_hit("esquerdo")
	
	-- label.set_text("Cenario#Pontos", string.format("%d", numHits))
end

local function cut_right()
	-- Animate cut right
	sound.play("polvo_direito#attack_sound", {delay = 0, gain = 2, pan = 1, speed = 1.2})
	spine.play_anim("polvo_direito#spinemodel", "Atack", go.PLAYBACK_ONCE_FORWARD, {playback_rate = 2}, function()
		back_to_idle("right")
	end)

	check_hit("direito")

	-- label.set_text("Cenario#Pontos", string.format("%d", numHits))
end

function on_input(self, action_id, action)
	if start == false then
		return
	end

	if curr_level == PREPARE_ROUND or
	curr_level == WAIT_PREPARE_ROUND or
	curr_level == PREPARE_FINISH or 
	curr_level == WAIT_PREPARE_FINISH or 
	curr_level == FINISH_HIM or
	curr_level == PREPARE_EVENT or
	curr_level == WAIT_PREPARE_EVENT or
	curr_level == FINAL_RESULT then
		-- Do nothing on input for these states, ignore
		return
	elseif curr_level == GAME_END then
		if action_id == hash("click") and action.pressed then
			clicks_to_finish = clicks_to_finish - 1
			if clicks_to_finish == 0 then
				msg.post("main:/controler#controler", "show_menu")
			end
		end
		return 
	else
		if action_id == hash("click") and action.pressed then
			if nextCut == "Left" then
				cut_left()			
				nextCut = "Right"
			elseif nextCut == "Right" then
				cut_right()
				nextCut = "Left"
			end

			if curr_level == FINISHING_LEVEL then
				finish_hits = finish_hits + 0.2
				if finish_hits > 4 then
					finish_hits = 4
				end
			end
		end
	end
end