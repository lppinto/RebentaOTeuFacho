local total_time = 0 -- To be set
local round_count = 1
local parent = nil
local boss_level = false

-- Life bars
local active_boss_life_bar = nil
local player_life_bar = "PlayerLifeBar"
local curr_facho_health = 100
local curr_player_stamina = 100
local bonus_visible = false

-- Round
local ROUND1 = 1
local ROUND2 = 2
local curr_round = ROUND1 -- default

local function get_str_digits_from_number(number)	

	-- Protection for negative number
	if number < 0 then number = 0 end

	local str_number = string.format("%02d", number);

	local str_digits_list = {}
	for d in string.gmatch(str_number, ".") do
		table.insert(str_digits_list, d)
	end

	return str_digits_list
end

function display_time (str_digits_list, alternative)
	if table.maxn(str_digits_list) > 2 then
		print ("Time only supports 2 digits for now")
		return
	end

	local sprite_pattern = "Tempo#sprite_%d"

	for pos, digit in ipairs (str_digits_list) do
		local sprite_to_update = string.format(sprite_pattern, pos)

		if alternative then
			digit = digit .. "_red"
		end
		
		msg.post(sprite_to_update, "play_animation", {id = hash(digit)})
	end
end

-- Start Timer Countdown
local timer_handle = nil
function start_timer()
	timer.delay(1, true, function (self, handle, elapsed)
		timer_handle = handle
		total_time = total_time - 1
		
		local alternative = false
		if total_time < 10 then
			alternative = true
			sound.play("Tempo#ticktock")
		end

		display_time (get_str_digits_from_number(total_time), alternative)

		if total_time <= 0 then
			sound.play("Tempo#timeout")
			timer.cancel(handle)
			msg.post(parent, "time_over")
		end
	end)
end

local function pause_timer()
	if timer_handle ~= nil then
		timer.cancel(timer_handle)
	end
end

local start_iter = 4
function start_round_sequence(self, handle, elapsed)
	if start_iter > 1 then
		local sprite_num = start_iter - 1;
		local sprite_id = string.format("start_%d", sprite_num)
		msg.post("NumberCount#sprite", "play_animation", {id = hash(sprite_id)})
		msg.post("NumberCount#sprite", "enable")

		local sound_id = string.format("NumberCount#count_%d", sprite_num)
		sound.play(sound_id, {delay = 0, gain = 3, pan = 0, speed = 1})
		
	elseif start_iter > 0 then
		local start_sprite = nil
		local sound_id = nil
		if curr_round == ROUND1 then
			start_sprite = "round1"
			sound_id = "NumberCount#round_1"
			active_boss_life_bar = "FachoLifeBar2"
		elseif curr_round == ROUND2 then
			start_sprite = "round_final"
			sound_id = "NumberCount#final_round"
			active_boss_life_bar = "FachoLifeBar1"
		end
		
		msg.post("NumberCount#sprite", "play_animation", {id = hash(start_sprite)})
		sound.play(sound_id, {delay = 0, gain = 3, pan = 0, speed = 1})
		
		go.animate("NumberCount", "scale.x", go.PLAYBACK_LOOP_PINGPONG, 1.1, go.EASING_INELASTIC, 0.5)
		go.animate("NumberCount", "scale.y", go.PLAYBACK_LOOP_PINGPONG, 1.1, go.EASING_INELASTIC, 0.5)
	else
		msg.post("NumberCount#sprite", "disable")
		timer.cancel(handle);
		
		-- Tell parent to start the round
		msg.post(parent, "start_round")
		start_timer()
	end
	
	start_iter = start_iter - 1
end

function set_bonus_level(level, restart)

	local function disable()
		msg.post("Bonus#bonus", "disable")
		msg.post("Amount#amount", "disable")
		msg.post("X#x_amount", "disable")
		go.set("Bonus", "scale.x", 0.25)
		go.set("Bonus", "scale.y", 0.25)
	end
	
	if level == 0 then
		-- Make it disappear
		if bonus_visible and restart == false then
			sound.play("Bonus#bonus_off", {gain = 3})
			go.animate("Bonus", "scale.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_INOUTBOUNCE, 2)
			go.animate("Bonus", "scale.y", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_INOUTBOUNCE, 2, 0, disable)
		else
			disable()
		end
		
		bonus_visible = false
		
	elseif level > 0 and level <= 5 then
		if bonus_visible == false then
			msg.post("Bonus#bonus", "enable")
			msg.post("Amount#amount", "enable")
			msg.post("X#x_amount", "enable")
		end

		sound.play("Bonus#bonus_sound", {gain = 3})
		msg.post("Amount#amount", "play_animation", {id = hash(string.format("%d", level))})
		go.animate("Bonus", "scale.x", go.PLAYBACK_ONCE_PINGPONG, 0.5, go.EASING_INOUTBOUNCE, 2)
		go.animate("Bonus", "scale.y", go.PLAYBACK_ONCE_PINGPONG, 0.5, go.EASING_INOUTBOUNCE, 2)

		bonus_visible = true
	end
end

function init(self)
	msg.post("NumberCount#sprite", "disable")

	-- No bonus yet
	set_bonus_level(0, true)
end

function final(self)
end

function update(self, dt)
end

-- Values in percentage
function hurt_facho(amount)
	if amount > curr_facho_health then amount = curr_facho_health end
	if amount < 0 then amount = 0 end
	
	curr_facho_health = curr_facho_health - amount
	
	if curr_facho_health > 0 then
		scale_factor = curr_facho_health / 100
		go.animate(active_boss_life_bar, "scale.x", go.PLAYBACK_ONCE_FORWARD, scale_factor, go.EASING_INOUTBACK, 0.2, 0)
	else
		go.animate(active_boss_life_bar, "scale.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_INOUTBACK, 0.2, 0)
	end

	
end

function recover_facho(amount)
	if amount > 100 then amount = 100 end
	if amount < 0 then amount = 0 end

	curr_facho_health = curr_facho_health + amount

	if curr_facho_health > 100 then
		go.animate(active_boss_life_bar, "scale.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.2, 0)
	else
		scale_factor = curr_facho_health / 100
		go.animate(active_boss_life_bar, "scale.x", go.PLAYBACK_ONCE_FORWARD, -scale_factor, go.EASING_LINEAR, 0.2, 0)
	end
end

-- Values in percentage
function hurt_player(amount)
	if amount > curr_player_stamina then amount = curr_player_stamina end
	if amount < 0 then amount = 0 end

	curr_player_stamina = curr_player_stamina - amount

	if curr_player_stamina > 0 then
		scale_factor = curr_player_stamina / 100
		go.animate(player_life_bar, "scale.x", go.PLAYBACK_ONCE_FORWARD, scale_factor, go.EASING_LINEAR, 0.2, 0)
	else
		go.animate(player_life_bar, "scale.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.2, 0)
	end
end

function prepare_life_bars()
	if curr_round == ROUND1 then
		if round_count == 2 then
			active_boss_life_bar = "FachoLifeBar2"
		elseif round_count == 1 then
			-- Hide the second life bar
			msg.post("FachoLifeBar2#sprite", "disable")
			active_boss_life_bar = "FachoLifeBar2"
		end
	elseif curr_round == ROUND2 then 
		-- Hide the second life bar
		msg.post("FachoLifeBar2#sprite", "disable")
		active_boss_life_bar = "FachoLifeBar2"
	else
		print("This component only supports 2 rounds for now")
	end
end

function set_facho_name(name)
	label.set_text("FachoName#label", name) 
end

function give_player(amount)
	if amount < 0 then amount = 0 end

	curr_player_stamina = curr_player_stamina + amount

	scale_factor = curr_player_stamina / 100
	go.animate(player_life_bar, "scale.x", go.PLAYBACK_ONCE_FORWARD, scale_factor, go.EASING_INOUTBACK, 0.2, 0)
end

function add_time(time)
	sound.play("Tempo#add_time")
	timer.delay(0.02, true, function(self, handle, elapsed)
		if time > 0 then
			total_time = total_time + 1
			time = time - 1
			display_time (get_str_digits_from_number(total_time), false)

			if total_time > 99 then
				-- Cannot add more than 99 time
				sound.stop("Tempo#add_time")
				timer.cancel(handle)
			end
		else	
			sound.stop("Tempo#add_time")
			timer.cancel(handle)
		end
	end)
end

function move_status_bar(position)
	go.animate("GameStatus", "position.y", go.PLAYBACK_ONCE_FORWARD, position, go.EASING_LINEAR, 1, 0)
end

function set_score(value)
	label.set_text("ScoreResult#score_result", string.format("%09d", value))
end



function on_message(self, message_id, message, sender)
	if parent == nil then
		parent = sender
	end
	
	if message_id == hash("prepare") then
		round_count = message[1]
		move_status_bar(580)
	elseif message_id == hash("start") then
		start_iter = 4
		curr_round = message[1]
		curr_facho_health = message[2]
		prepare_life_bars()
		timer.delay(1, true, start_round_sequence)
	elseif message_id == hash("pause") then
		pause_timer()
	elseif message_id == hash("set_score") then
		set_score(message[1])
	elseif message_id == hash("hurt_facho") then
		hurt_facho(message[1])
	elseif message_id == hash("hurt_player") then
		hurt_player(message[1])
	elseif message_id == hash("give_player") then
		give_player(message[1])
	elseif message_id == hash("facho_name") then
		set_facho_name(message[1])
	elseif message_id == hash("set_time") then
		total_time = message[1]
		display_time (get_str_digits_from_number(total_time), false)
	elseif message_id == hash("add_time") then
		-- Add time with animation effect
		add_time(message[1])
	elseif message_id == hash("move_status_bar") then
		move_status_bar(message[1])
	elseif message_id == hash("set_bonus_level") then
		set_bonus_level(message[1], message[2])
	end
end
