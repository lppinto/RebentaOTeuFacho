local total_time = 30

local function get_str_digits_from_number(number)	

	-- Protection for negative number
	if number < 0 then number = 0 end

	local str_number = string.format("%02d", number);

	local str_digits_list = {}
	for d in string.gmatch(str_number, ".") do
		table.insert(str_digits_list, d)
	end

	return str_digits_list
end

function display_time (str_digits_list, alternative)
	if table.maxn(str_digits_list) > 2 then
		print ("Time only supports 2 digits for now")
		return
	end

	local sprite_pattern = "Tempo#sprite_%d"

	for pos, digit in ipairs (str_digits_list) do
		local sprite_to_update = string.format(sprite_pattern, pos)

		if alternative then
			digit = digit .. "_red"
		end
		
		msg.post(sprite_to_update, "play_animation", {id = hash(digit)})
	end
end

local start_round = 1
local start_iter = 4
function start_start_sequence(self, handle, elapsed)
	if start_iter > 1 then
		local sprite_num = start_iter - 1;
		local sprite_id = string.format("start_%d", sprite_num)
		msg.post("NumberCount#sprite", "play_animation", {id = hash(sprite_id)})
		msg.post("NumberCount#sprite", "enable")

		local sound_id = string.format("NumberCount#count_%d", sprite_num)
		sound.play(sound_id, {delay = 0, gain = 3, pan = 0, speed = 1})
		
	elseif start_iter > 0 then
		
		local start_sprite = "round1"
		local sound_id = "NumberCount#round_1"
		if start_round == 2 then
			start_sprite = "finalRound"
			sound_id = "NumberCount#final_round"
		end
		msg.post("NumberCount#sprite", "play_animation", {id = hash(start_sprite)})
		sound.play(sound_id, {delay = 0, gain = 3, pan = 0, speed = 1})
		
		go.animate("NumberCount", "scale.x", go.PLAYBACK_LOOP_PINGPONG, 1.1, go.EASING_INELASTIC, 0.5)
		go.animate("NumberCount", "scale.y", go.PLAYBACK_LOOP_PINGPONG, 1.1, go.EASING_INELASTIC, 0.5)
	else
		msg.post("NumberCount#sprite", "disable")
		timer.cancel(handle);
	end
	
	start_iter = start_iter - 1
end
	
function init(self)

	display_time (get_str_digits_from_number(total_time), false)

	msg.post("NumberCount#sprite", "disable")

	timer.delay(2, true, start_start_sequence)
	
	timer.delay(1, true, function ()
		total_time = total_time - 1

		local alternative = false
		if total_time < 10 then
			alternative = true
		end
			
		display_time (get_str_digits_from_number(total_time), alternative)
	end)
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)

end

function on_input(self, action_id, action)
end

function on_reload(self)
end
